   1               		.file	"main.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               	.global	hardware_init
  12               	hardware_init:
  13               	.LFB7:
  14               		.file 1 "main.c"
   1:main.c        **** #define F_CPU 1000000
   2:main.c        **** #include <avr/io.h>
   3:main.c        **** #include <util/delay.h>
   4:main.c        **** #include <avr/interrupt.h>
   5:main.c        **** 
   6:main.c        **** #include "ssd1306xled.h"
   7:main.c        **** #include "ssd1306xledtx.h"
   8:main.c        **** #include "font6x8.h"
   9:main.c        **** #include "font8x16.h"
  10:main.c        **** 
  11:main.c        **** volatile int i = 0;
  12:main.c        **** volatile int doIt = 0;
  13:main.c        **** 
  14:main.c        **** /*/\/\/\/\/\/\/\/\/\/\/\/\/\INITS/\/\/\/\/\/\/\/\/\/\/\/\/\*/
  15:main.c        **** /*--------------------HARDWARE INIT --------------------*/
  16:main.c        **** void hardware_init(void){
  15               		.loc 1 16 25 view -0
  16               		.cfi_startproc
  17               	/* prologue: function */
  18               	/* frame size = 0 */
  19               	/* stack size = 0 */
  20               	.L__stack_usage = 0
  17:main.c        ****     DDRB = 0b00000001;
  21               		.loc 1 17 4 view .LVU1
  22               		.loc 1 17 9 is_stmt 0 view .LVU2
  23 0000 81E0      		ldi r24,lo8(1)
  24 0002 87BB      		out 0x17,r24
  18:main.c        ****     PORTB = 0b00000001;
  25               		.loc 1 18 4 is_stmt 1 view .LVU3
  26               		.loc 1 18 10 is_stmt 0 view .LVU4
  27 0004 88BB      		out 0x18,r24
  19:main.c        **** 
  20:main.c        ****     ssd1306_init();
  28               		.loc 1 20 5 is_stmt 1 view .LVU5
  29 0006 00D0      		rcall ssd1306_init
  30               	.LVL0:
  21:main.c        ****     ssd1306tx_init(ssd1306xled_font6x8data, ' ');
  31               		.loc 1 21 5 view .LVU6
  32 0008 60E2      		ldi r22,lo8(32)
  33 000a 80E0      		ldi r24,lo8(ssd1306xled_font6x8data)
  34 000c 90E0      		ldi r25,hi8(ssd1306xled_font6x8data)
  35 000e 00D0      		rcall ssd1306tx_init
  36               	.LVL1:
  22:main.c        ****     ssd1306_clear();	// Clear the screen.
  37               		.loc 1 22 5 view .LVU7
  38 0010 20E0      		ldi r18,0
  39 0012 40E0      		ldi r20,0
  40 0014 60E0      		ldi r22,0
  41 0016 80E0      		ldi r24,0
  42 0018 00D0      		rcall ssd1306_fill4
  43               	.LVL2:
  23:main.c        **** 
  24:main.c        ****       ADMUX =
  44               		.loc 1 24 6 view .LVU8
  45               		.loc 1 24 12 is_stmt 0 view .LVU9
  46 001a 83E8      		ldi r24,lo8(-125)
  47 001c 87B9      		out 0x7,r24
  25:main.c        ****               (0 << ADLAR) |     // don't left shift result
  26:main.c        ****               (0 << REFS2) |     // Sets ref. voltage to internal 1.1V
  27:main.c        ****               (1 << REFS1) |     // Sets ref. voltage to internal 1.1V
  28:main.c        ****               (0 << REFS0) |     // Sets ref. voltage to internal 1.1V
  29:main.c        ****               (0 << MUX3)  |     //Set ADC input
  30:main.c        ****               (0 << MUX2)  |     //Set ADC input
  31:main.c        ****               (1 << MUX1)  |     //Set ADC input
  32:main.c        ****               (1 << MUX0);       //Set ADC input
  33:main.c        **** 
  34:main.c        ****               ADCSRA =
  48               		.loc 1 34 14 is_stmt 1 view .LVU10
  49               		.loc 1 34 21 is_stmt 0 view .LVU11
  50 001e 86E8      		ldi r24,lo8(-122)
  51 0020 86B9      		out 0x6,r24
  35:main.c        ****               (1 << ADEN)  |     // Enable ADC
  36:main.c        ****               (1 << ADPS2) |     // set prescaler to 64, bit 2
  37:main.c        ****               (1 << ADPS1) |     // set prescaler to 64, bit 1
  38:main.c        ****               (0 << ADPS0);      // set prescaler to 64, bit 0
  39:main.c        **** 
  40:main.c        ****       	 														/*-------------DECLARING PINS-------------*/
  41:main.c        ****       	 DDRB  |= 0b00000001;									// turn DB0 into output
  52               		.loc 1 41 8 is_stmt 1 view .LVU12
  53               		.loc 1 41 14 is_stmt 0 view .LVU13
  54 0022 B89A      		sbi 0x17,0
  42:main.c        ****       	 PORTB |= 0b00000000;									// turns off all pins
  55               		.loc 1 42 8 is_stmt 1 view .LVU14
  56               		.loc 1 42 14 is_stmt 0 view .LVU15
  57 0024 88B3      		in r24,0x18
  58 0026 88BB      		out 0x18,r24
  59               	/* epilogue start */
  43:main.c        **** }
  60               		.loc 1 43 1 view .LVU16
  61 0028 0895      		ret
  62               		.cfi_endproc
  63               	.LFE7:
  65               	.global	timer1_init
  67               	timer1_init:
  68               	.LFB8:
  44:main.c        **** 
  45:main.c        **** /*--------------------TIMER INIT --------------------*/
  46:main.c        **** void timer1_init(void){
  69               		.loc 1 46 23 is_stmt 1 view -0
  70               		.cfi_startproc
  71               	/* prologue: function */
  72               	/* frame size = 0 */
  73               	/* stack size = 0 */
  74               	.L__stack_usage = 0
  47:main.c        ****   TCCR0A = (1 << WGM01);             //CTC mode
  75               		.loc 1 47 2 view .LVU18
  76               		.loc 1 47 9 is_stmt 0 view .LVU19
  77 002a 82E0      		ldi r24,lo8(2)
  78 002c 8ABD      		out 0x2a,r24
  48:main.c        ****   TCCR0B |= (1 << CS02) | (0 << CS01) | (1 << CS00); //clock prescaler 8192
  79               		.loc 1 48 2 is_stmt 1 view .LVU20
  80               		.loc 1 48 9 is_stmt 0 view .LVU21
  81 002e 83B7      		in r24,0x33
  82 0030 8560      		ori r24,lo8(5)
  83 0032 83BF      		out 0x33,r24
  49:main.c        ****   OCR0A = 122;    // 50us compare value
  84               		.loc 1 49 2 is_stmt 1 view .LVU22
  85               		.loc 1 49 8 is_stmt 0 view .LVU23
  86 0034 8AE7      		ldi r24,lo8(122)
  87 0036 89BD      		out 0x29,r24
  50:main.c        ****   TIMSK |= (1<<OCIE0A);              //if you want interrupt
  88               		.loc 1 50 2 is_stmt 1 view .LVU24
  89               		.loc 1 50 8 is_stmt 0 view .LVU25
  90 0038 89B7      		in r24,0x39
  91 003a 8061      		ori r24,lo8(16)
  92 003c 89BF      		out 0x39,r24
  93               	/* epilogue start */
  51:main.c        **** }
  94               		.loc 1 51 1 view .LVU26
  95 003e 0895      		ret
  96               		.cfi_endproc
  97               	.LFE8:
  99               	.global	read_ADC
 101               	read_ADC:
 102               	.LVL3:
 103               	.LFB9:
  52:main.c        **** 
  53:main.c        **** 
  54:main.c        **** /*/\/\/\/\/\/\/\/\/\/\/\/\/\FUNCTIONS/\/\/\/\/\/\/\/\/\/\/\/\/\*/
  55:main.c        **** /*--------------------ADC READING FUNCTION --------------------*/
  56:main.c        **** int read_ADC(uint8_t mux1, uint8_t mux0){
 104               		.loc 1 56 41 is_stmt 1 view -0
 105               		.cfi_startproc
 106               	/* prologue: function */
 107               	/* frame size = 0 */
 108               	/* stack size = 0 */
 109               	.L__stack_usage = 0
  57:main.c        ****   //REFS combinations for respective input:
  58:main.c        ****   // REFS(2:0) = [000], for input VCC
  59:main.c        ****   // REFS(2:0) = [001], for input AREF
  60:main.c        ****   // REFS(2:0) = [010], for input AREF
  61:main.c        **** 
  62:main.c        ****   //refs combinations for respective input:
  63:main.c        ****   // MUX(3:0) = [0011], for input PB3
  64:main.c        ****   // MUX(3:0) = [0001], for input PB2
  65:main.c        ****   // MUX(3:0) = [0010], for input PB4
  66:main.c        ****   // MUX(3:0) = [0011], for internal band gap
  67:main.c        **** 
  68:main.c        ****   ADMUX =
 110               		.loc 1 68 2 view .LVU28
  69:main.c        ****           (0 << ADLAR) |     // don't left shift result
  70:main.c        ****           (0 << REFS2) |     // Sets ref. voltage to internal 1.1V
  71:main.c        ****           (0 << REFS1) |     // Sets ref. voltage to internal 1.1V
  72:main.c        ****           (0 << REFS0) |     // Sets ref. voltage to internal 1.1V
  73:main.c        ****           (0 << MUX3)  |     // use ADC3 for input (PB3), MUX bit 3
  74:main.c        ****           (0 << MUX2)  |     // use ADC3 for input (PB3), MUX bit 2
 111               		.loc 1 74 22 is_stmt 0 view .LVU29
 112 0040 880F      		lsl r24
 113               	.LVL4:
  75:main.c        ****           (mux1 << MUX1)  |     // use ADC3 for input (PB3), MUX bit 1
 114               		.loc 1 75 25 view .LVU30
 115 0042 862B      		or r24,r22
  68:main.c        ****           (0 << ADLAR) |     // don't left shift result
 116               		.loc 1 68 8 view .LVU31
 117 0044 87B9      		out 0x7,r24
  76:main.c        ****           (mux0 << MUX0);       // use ADC3 for input (PB3), MUX bit 0
  77:main.c        **** 
  78:main.c        ****   uint8_t adc_lobyte; // to hold the low byte of the ADC register (ADCL)
 118               		.loc 1 78 3 is_stmt 1 view .LVU32
  79:main.c        ****   uint16_t raw_adc;
 119               		.loc 1 79 3 view .LVU33
  80:main.c        **** 
  81:main.c        ****   _delay_us(200);
 120               		.loc 1 81 3 view .LVU34
 121               	.LVL5:
 122               	.LBB6:
 123               	.LBI6:
 124               		.file 2 "/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h"
   1:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h ****    Copyright (c) 2004,2005,2007 Joerg Wunsch
   3:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h ****    Copyright (c) 2007  Florin-Viorel Petrov
   4:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h ****    All rights reserved.
   5:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h **** 
   6:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h ****    Redistribution and use in source and binary forms, with or without
   7:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h ****    modification, are permitted provided that the following conditions are met:
   8:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h **** 
   9:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h ****    * Redistributions of source code must retain the above copyright
  10:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer.
  11:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h **** 
  12:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h ****    * Redistributions in binary form must reproduce the above copyright
  13:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer in
  14:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h ****      the documentation and/or other materials provided with the
  15:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h ****      distribution.
  16:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h **** 
  17:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h ****    * Neither the name of the copyright holders nor the names of
  18:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h ****      contributors may be used to endorse or promote products derived
  19:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h ****      from this software without specific prior written permission.
  20:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h **** 
  21:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  25:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  32:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h **** 
  33:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h **** /* $Id: delay.h.in 2506 2016-02-08 10:05:45Z joerg_wunsch $ */
  34:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h **** 
  35:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h **** #ifndef _UTIL_DELAY_H_
  36:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h **** #define _UTIL_DELAY_H_ 1
  37:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h **** 
  38:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h **** #ifndef __DOXYGEN__
  39:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h **** #  ifndef __HAS_DELAY_CYCLES
  40:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h **** #    define __HAS_DELAY_CYCLES 1
  41:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h **** #  endif
  42:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h **** #endif  /* __DOXYGEN__ */
  43:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h **** 
  44:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h **** #include <inttypes.h>
  45:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h **** #include <util/delay_basic.h>
  46:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h **** #include <math.h>
  47:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h **** 
  48:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h **** /** \file */
  49:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h **** /** \defgroup util_delay <util/delay.h>: Convenience functions for busy-wait delay loops
  50:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h ****     \code
  51:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  52:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h ****     //#define F_CPU 14.7456E6
  53:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h ****     #include <util/delay.h>
  54:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h ****     \endcode
  55:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h **** 
  56:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h ****     \note As an alternative method, it is possible to pass the
  57:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h ****     F_CPU macro down to the compiler from the Makefile.
  58:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h ****     Obviously, in that case, no \c \#define statement should be
  59:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h ****     used.
  60:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h **** 
  61:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h ****     The functions in this header file are wrappers around the basic
  62:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h ****     busy-wait functions from <util/delay_basic.h>.  They are meant as
  63:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h ****     convenience functions where actual time values can be specified
  64:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h ****     rather than a number of cycles to wait for.  The idea behind is
  65:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h ****     that compile-time constant expressions will be eliminated by
  66:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h ****     compiler optimization so floating-point expressions can be used
  67:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h ****     to calculate the number of delay cycles needed based on the CPU
  68:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h ****     frequency passed by the macro F_CPU.
  69:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h **** 
  70:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h ****     \note In order for these functions to work as intended, compiler
  71:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h ****     optimizations <em>must</em> be enabled, and the delay time
  72:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h ****     <em>must</em> be an expression that is a known constant at
  73:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h ****     compile-time.  If these requirements are not met, the resulting
  74:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h ****     delay will be much longer (and basically unpredictable), and
  75:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h ****     applications that otherwise do not use floating-point calculations
  76:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h ****     will experience severe code bloat by the floating-point library
  77:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h ****     routines linked into the application.
  78:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h **** 
  79:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h ****     The functions available allow the specification of microsecond, and
  80:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h ****     millisecond delays directly, using the application-supplied macro
  81:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h ****     F_CPU as the CPU clock frequency (in Hertz).
  82:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h **** 
  83:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h **** */
  84:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h **** 
  85:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h **** #if !defined(__DOXYGEN__)
  86:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h **** static __inline__ void _delay_us(double __us) __attribute__((__always_inline__));
  87:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h **** static __inline__ void _delay_ms(double __ms) __attribute__((__always_inline__));
  88:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h **** #endif
  89:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h **** 
  90:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h **** #ifndef F_CPU
  91:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h **** /* prevent compiler error by supplying a default */
  92:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h **** # warning "F_CPU not defined for <util/delay.h>"
  93:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h **** /** \ingroup util_delay
  94:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h ****     \def F_CPU
  95:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h ****     \brief CPU frequency in Hz
  96:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h **** 
  97:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h ****     The macro F_CPU specifies the CPU frequency to be considered by
  98:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h ****     the delay macros.  This macro is normally supplied by the
  99:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h ****     environment (e.g. from within a project header, or the project's
 100:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h ****     Makefile).  The value 1 MHz here is only provided as a "vanilla"
 101:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h ****     fallback if no such user-provided definition could be found.
 102:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h **** 
 103:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h ****     In terms of the delay functions, the CPU frequency can be given as
 104:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h ****     a floating-point constant (e.g. 3.6864E6 for 3.6864 MHz).
 105:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h ****     However, the macros in <util/setbaud.h> require it to be an
 106:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h ****     integer value.
 107:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h ****  */
 108:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h **** # define F_CPU 1000000UL
 109:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h **** #endif
 110:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h **** 
 111:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h **** #ifndef __OPTIMIZE__
 112:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h **** # warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
 113:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h **** #endif
 114:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h **** 
 115:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 116:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 117:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h ****   __STDC_HOSTED__
 118:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h **** #  include <math.h>
 119:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h **** #endif
 120:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h **** 
 121:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h **** /**
 122:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h ****    \ingroup util_delay
 123:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h **** 
 124:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
 125:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h **** 
 126:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 127:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 128:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h **** 
 129:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 130:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h **** 
 131:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h ****    When the user request delay which exceed the maximum possible one,
 132:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h ****    _delay_ms() provides a decreased resolution functionality. In this
 133:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h ****    mode _delay_ms() will work with a resolution of 1/10 ms, providing
 134:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h ****    delays up to 6.5535 seconds (independent from CPU frequency).  The
 135:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h ****    user will not be informed about decreased resolution.
 136:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h **** 
 137:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles()
 138:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 ms/ F_CPU in MHz. For
 139:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h ****    values greater than the maximal possible delay, overflows results in
 140:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h ****    no delay i.e., 0ms.
 141:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h **** 
 142:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h ****    Conversion of \c __ms into clock cycles may not always result in
 143:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h ****    integer.  By default, the clock cycles rounded up to next
 144:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h ****    integer. This ensures that the user gets at least \c __ms
 145:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h ****    microseconds of delay.
 146:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h **** 
 147:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h ****    Alternatively, by defining the macro \c __DELAY_ROUND_DOWN__, or
 148:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h ****    \c __DELAY_ROUND_CLOSEST__, before including this header file, the
 149:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h ****    algorithm can be made to round down, or round to closest integer,
 150:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h ****    respectively.
 151:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h **** 
 152:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h ****    \note
 153:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h **** 
 154:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h ****    The implementation of _delay_ms() based on
 155:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h ****    __builtin_avr_delay_cycles() is not backward compatible with older
 156:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h ****    implementations.  In order to get functionality backward compatible
 157:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h ****    with previous versions, the macro \c "__DELAY_BACKWARD_COMPATIBLE__"
 158:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h ****    must be defined before including this header file. Also, the
 159:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h ****    backward compatible algorithm will be chosen if the code is
 160:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h ****    compiled in a <em>freestanding environment</em> (GCC option
 161:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h ****    \c -ffreestanding), as the math functions required for rounding are
 162:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h ****    not available to the compiler then.
 163:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h **** 
 164:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h ****  */
 165:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h **** void
 166:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h **** _delay_ms(double __ms)
 167:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h **** {
 168:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h **** 	double __tmp ;
 169:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 170:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 171:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h ****   __STDC_HOSTED__
 172:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h **** 	uint32_t __ticks_dc;
 173:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 174:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 175:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h **** 
 176:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 177:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 178:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h **** 
 179:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 180:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 181:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h **** 
 182:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h **** 	#else
 183:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h **** 		//round up by default
 184:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 185:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h **** 	#endif
 186:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h **** 
 187:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 188:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h **** 
 189:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h **** #else
 190:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h **** 	uint16_t __ticks;
 191:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 4e3) * __ms;
 192:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h **** 	if (__tmp < 1.0)
 193:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h **** 		__ticks = 1;
 194:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h **** 	else if (__tmp > 65535)
 195:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h **** 	{
 196:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h **** 		//	__ticks = requested delay in 1/10 ms
 197:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h **** 		__ticks = (uint16_t) (__ms * 10.0);
 198:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h **** 		while(__ticks)
 199:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h **** 		{
 200:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h **** 			// wait 1/10 ms
 201:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h **** 			_delay_loop_2(((F_CPU) / 4e3) / 10);
 202:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h **** 			__ticks --;
 203:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h **** 		}
 204:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h **** 		return;
 205:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h **** 	}
 206:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h **** 	else
 207:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h **** 		__ticks = (uint16_t)__tmp;
 208:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h **** 	_delay_loop_2(__ticks);
 209:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h **** #endif
 210:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h **** }
 211:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h **** 
 212:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h **** /**
 213:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h ****    \ingroup util_delay
 214:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h **** 
 215:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h ****    Perform a delay of \c __us microseconds, using _delay_loop_1().
 216:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h **** 
 217:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 218:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 219:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h **** 
 220:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h ****    The maximal possible delay is 768 us / F_CPU in MHz.
 221:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h **** 
 222:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h ****    If the user requests a delay greater than the maximal possible one,
 223:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h ****    _delay_us() will automatically call _delay_ms() instead.  The user
 224:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h ****    will not be informed about this case.
 225:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h **** 
 226:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles()
 227:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 us/ F_CPU in MHz. For
 228:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h ****    values greater than the maximal possible delay, overflow results in
 229:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h ****    no delay i.e., 0us.
 230:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h **** 
 231:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h ****    Conversion of \c __us into clock cycles may not always result in
 232:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h ****    integer.  By default, the clock cycles rounded up to next
 233:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h ****    integer. This ensures that the user gets at least \c __us
 234:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h ****    microseconds of delay.
 235:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h **** 
 236:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h ****    Alternatively, by defining the macro \c __DELAY_ROUND_DOWN__, or
 237:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h ****    \c __DELAY_ROUND_CLOSEST__, before including this header file, the
 238:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h ****    algorithm can be made to round down, or round to closest integer,
 239:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h ****    respectively.
 240:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h **** 
 241:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h ****    \note
 242:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h **** 
 243:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h ****    The implementation of _delay_ms() based on
 244:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h ****    __builtin_avr_delay_cycles() is not backward compatible with older
 245:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h ****    implementations.  In order to get functionality backward compatible
 246:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h ****    with previous versions, the macro \c __DELAY_BACKWARD_COMPATIBLE__
 247:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h ****    must be defined before including this header file. Also, the
 248:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h ****    backward compatible algorithm will be chosen if the code is
 249:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h ****    compiled in a <em>freestanding environment</em> (GCC option
 250:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h ****    \c -ffreestanding), as the math functions required for rounding are
 251:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h ****    not available to the compiler then.
 252:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h **** 
 253:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h ****  */
 254:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h **** void
 255:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h **** _delay_us(double __us)
 125               		.loc 2 255 1 view .LVU35
 126               	.LBB7:
 256:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h **** {
 257:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h **** 	double __tmp ;
 127               		.loc 2 257 2 view .LVU36
 258:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 259:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 260:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h ****   __STDC_HOSTED__
 261:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h **** 	uint32_t __ticks_dc;
 128               		.loc 2 261 2 view .LVU37
 262:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 129               		.loc 2 262 2 view .LVU38
 263:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e6) * __us;
 130               		.loc 2 263 2 view .LVU39
 264:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h **** 
 265:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 266:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 267:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h **** 
 268:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 269:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 270:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h **** 
 271:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h **** 	#else
 272:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h **** 		//round up by default
 273:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 131               		.loc 2 273 3 view .LVU40
 274:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h **** 	#endif
 275:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h **** 
 276:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 132               		.loc 2 276 2 view .LVU41
 133 0046 82E4      		ldi r24,lo8(66)
 134 0048 8A95      	1:	dec r24
 135 004a 01F4      		brne 1b
 136 004c 00C0      		rjmp .
 137               	.LVL6:
 138               		.loc 2 276 2 is_stmt 0 view .LVU42
 139               	.LBE7:
 140               	.LBE6:
  82:main.c        **** 
  83:main.c        ****   ADCSRA |= (1 << ADSC);         // start ADC measurement
 141               		.loc 1 83 2 is_stmt 1 view .LVU43
 142               		.loc 1 83 9 is_stmt 0 view .LVU44
 143 004e 369A      		sbi 0x6,6
  84:main.c        ****   while (ADCSRA & (1 << ADSC) ); // wait till conversion complete
 144               		.loc 1 84 3 is_stmt 1 view .LVU45
 145               	.L4:
 146               		.loc 1 84 31 discriminator 1 view .LVU46
 147               		.loc 1 84 9 is_stmt 0 discriminator 1 view .LVU47
 148 0050 3699      		sbic 0x6,6
 149 0052 00C0      		rjmp .L4
  85:main.c        **** 
  86:main.c        ****   adc_lobyte = ADCL; // get the sample value from ADCL
 150               		.loc 1 86 3 is_stmt 1 view .LVU48
 151               		.loc 1 86 14 is_stmt 0 view .LVU49
 152 0054 84B1      		in r24,0x4
 153               	.LVL7:
  87:main.c        ****   raw_adc = ADCH<<8 | adc_lobyte;   // add lobyte and hibyte
 154               		.loc 1 87 3 is_stmt 1 view .LVU50
 155               		.loc 1 87 13 is_stmt 0 view .LVU51
 156 0056 95B1      		in r25,0x5
 157               	.LVL8:
  88:main.c        **** 
  89:main.c        ****   return raw_adc;
 158               		.loc 1 89 3 is_stmt 1 view .LVU52
 159               	/* epilogue start */
  90:main.c        **** }
 160               		.loc 1 90 1 is_stmt 0 view .LVU53
 161 0058 0895      		ret
 162               		.cfi_endproc
 163               	.LFE9:
 165               	.global	__floatunsisf
 166               	.global	__divsf3
 167               	.global	__fixsfsi
 168               	.global	read_VCC
 170               	read_VCC:
 171               	.LFB10:
  91:main.c        **** 
  92:main.c        **** /*--------------------VCC READING FUNCTION --------------------*/
  93:main.c        **** int read_VCC(){
 172               		.loc 1 93 15 is_stmt 1 view -0
 173               		.cfi_startproc
 174               	/* prologue: function */
 175               	/* frame size = 0 */
 176               	/* stack size = 0 */
 177               	.L__stack_usage = 0
  94:main.c        ****   ADMUX =
 178               		.loc 1 94 2 view .LVU55
 179               		.loc 1 94 8 is_stmt 0 view .LVU56
 180 005a 8CE0      		ldi r24,lo8(12)
 181 005c 87B9      		out 0x7,r24
  95:main.c        ****           (0 << ADLAR) |     // don't left shift result
  96:main.c        ****           (0 << REFS2) |     // Sets ref. voltage to internal 1.1V
  97:main.c        ****           (0 << REFS1) |     // Sets ref. voltage to internal 1.1V
  98:main.c        ****           (0 << REFS0) |     // Sets ref. voltage to internal 1.1V
  99:main.c        ****           (1 << MUX3)  |     // use ADC3 for input (PB3), MUX bit 3
 100:main.c        ****           (1 << MUX2)  |     // use ADC3 for input (PB3), MUX bit 2
 101:main.c        ****           (0 << MUX1)  |     // use ADC3 for input (PB3), MUX bit 1
 102:main.c        ****           (0 << MUX0);       // use ADC3 for input (PB3), MUX bit 0
 103:main.c        **** 
 104:main.c        ****   uint8_t adc_lobyte; // to hold the low byte of the ADC register (ADCL)
 182               		.loc 1 104 3 is_stmt 1 view .LVU57
 105:main.c        ****   uint16_t raw_adc;
 183               		.loc 1 105 3 view .LVU58
 106:main.c        **** 
 107:main.c        ****   _delay_us(500);
 184               		.loc 1 107 3 view .LVU59
 185               	.LVL9:
 186               	.LBB8:
 187               	.LBI8:
 255:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h **** {
 188               		.loc 2 255 1 view .LVU60
 189               	.LBB9:
 257:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 190               		.loc 2 257 2 view .LVU61
 261:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 191               		.loc 2 261 2 view .LVU62
 262:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e6) * __us;
 192               		.loc 2 262 2 view .LVU63
 263:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h **** 
 193               		.loc 2 263 2 view .LVU64
 273:/usr/local/Cellar/avr-gcc/8.2.0/avr/include/util/delay.h **** 	#endif
 194               		.loc 2 273 3 view .LVU65
 195               		.loc 2 276 2 view .LVU66
 196 005e 86EA      		ldi r24,lo8(-90)
 197 0060 8A95      	1:	dec r24
 198 0062 01F4      		brne 1b
 199 0064 00C0      		rjmp .
 200               	.LVL10:
 201               		.loc 2 276 2 is_stmt 0 view .LVU67
 202               	.LBE9:
 203               	.LBE8:
 108:main.c        **** 
 109:main.c        ****   ADCSRA |= (1 << ADSC);         // start ADC measurement
 204               		.loc 1 109 2 is_stmt 1 view .LVU68
 205               		.loc 1 109 9 is_stmt 0 view .LVU69
 206 0066 369A      		sbi 0x6,6
 110:main.c        ****   while (ADCSRA & (1 << ADSC) ); // wait till conversion complete
 207               		.loc 1 110 3 is_stmt 1 view .LVU70
 208               	.L7:
 209               		.loc 1 110 31 discriminator 1 view .LVU71
 210               		.loc 1 110 9 is_stmt 0 discriminator 1 view .LVU72
 211 0068 3699      		sbic 0x6,6
 212 006a 00C0      		rjmp .L7
 111:main.c        **** 
 112:main.c        ****   adc_lobyte = ADCL; // get the sample value from ADCL
 213               		.loc 1 112 3 is_stmt 1 view .LVU73
 214               		.loc 1 112 14 is_stmt 0 view .LVU74
 215 006c 64B1      		in r22,0x4
 216               	.LVL11:
 113:main.c        ****   raw_adc = ADCH<<8 | adc_lobyte;   // add lobyte and hibyte
 217               		.loc 1 113 3 is_stmt 1 view .LVU75
 218               		.loc 1 113 13 is_stmt 0 view .LVU76
 219 006e 85B1      		in r24,0x5
 220               	.LVL12:
 114:main.c        **** 
 115:main.c        ****   return (1100UL*1023*0.96)/raw_adc;
 221               		.loc 1 115 3 is_stmt 1 view .LVU77
 113:main.c        ****   raw_adc = ADCH<<8 | adc_lobyte;   // add lobyte and hibyte
 222               		.loc 1 113 20 is_stmt 0 view .LVU78
 223 0070 782F      		mov r23,r24
 224               		.loc 1 115 28 view .LVU79
 225 0072 90E0      		ldi r25,0
 226 0074 80E0      		ldi r24,0
 227               	.LVL13:
 228               		.loc 1 115 28 view .LVU80
 229 0076 00D0      		rcall __floatunsisf
 230               	.LVL14:
 231               		.loc 1 115 28 view .LVU81
 232 0078 9B01      		movw r18,r22
 233 007a AC01      		movw r20,r24
 234 007c 60E0      		ldi r22,0
 235 007e 7FED      		ldi r23,lo8(-33)
 236 0080 83E8      		ldi r24,lo8(-125)
 237 0082 99E4      		ldi r25,lo8(73)
 238 0084 00D0      		rcall __divsf3
 239               	.LVL15:
 240 0086 00D0      		rcall __fixsfsi
 241               	.LVL16:
 116:main.c        **** }
 242               		.loc 1 116 1 view .LVU82
 243 0088 CB01      		movw r24,r22
 244               	/* epilogue start */
 245 008a 0895      		ret
 246               		.cfi_endproc
 247               	.LFE10:
 249               	.global	__vector_10
 251               	__vector_10:
 252               	.LFB11:
 117:main.c        **** 
 118:main.c        **** 
 119:main.c        **** /*--------------------TIMER INTERRUPT RUN--------------------*/
 120:main.c        **** ISR(TIMER0_COMPA_vect)
 121:main.c        **** {
 253               		.loc 1 121 1 is_stmt 1 view -0
 254               		.cfi_startproc
 255 008c 1F92 1FB6 		__gcc_isr 1
 255      1F92 1124 
 255      8F93 
 256 0096 9F93      		push r25
 257               	.LCFI0:
 258               		.cfi_def_cfa_offset 3
 259               		.cfi_offset 25, -2
 260               	/* prologue: Signal */
 261               	/* frame size = 0 */
 262               	/* stack size = 1...5 */
 263               	.L__stack_usage = 1 + __gcc_isr.n_pushed
 122:main.c        ****   i++;
 264               		.loc 1 122 3 view .LVU84
 265               		.loc 1 122 4 is_stmt 0 view .LVU85
 266 0098 8091 0000 		lds r24,i
 267 009c 9091 0000 		lds r25,i+1
 268 00a0 0196      		adiw r24,1
 269 00a2 9093 0000 		sts i+1,r25
 270 00a6 8093 0000 		sts i,r24
 123:main.c        **** 
 124:main.c        ****   if(i > 21){
 271               		.loc 1 124 3 is_stmt 1 view .LVU86
 272               		.loc 1 124 8 is_stmt 0 view .LVU87
 273 00aa 8091 0000 		lds r24,i
 274 00ae 9091 0000 		lds r25,i+1
 275               		.loc 1 124 5 view .LVU88
 276 00b2 8631      		cpi r24,22
 277 00b4 9105      		cpc r25,__zero_reg__
 278 00b6 04F0      		brlt .L9
 125:main.c        ****     doIt = 1;
 279               		.loc 1 125 5 is_stmt 1 view .LVU89
 280               		.loc 1 125 10 is_stmt 0 view .LVU90
 281 00b8 81E0      		ldi r24,lo8(1)
 282 00ba 90E0      		ldi r25,0
 283 00bc 9093 0000 		sts doIt+1,r25
 284 00c0 8093 0000 		sts doIt,r24
 126:main.c        ****     i = 0;
 285               		.loc 1 126 5 is_stmt 1 view .LVU91
 286               		.loc 1 126 7 is_stmt 0 view .LVU92
 287 00c4 1092 0000 		sts i+1,__zero_reg__
 288 00c8 1092 0000 		sts i,__zero_reg__
 289               	.L9:
 290               	/* epilogue start */
 127:main.c        ****   }
 128:main.c        **** }
 291               		.loc 1 128 1 view .LVU93
 292 00cc 9F91      		pop r25
 293 00ce 8F91 1F90 		__gcc_isr 2
 293      1FBE 1F90 
 294 00d6 1895      		reti
 295               		__gcc_isr 0,r24
 296               		.cfi_endproc
 297               	.LFE11:
 299               		.section	.rodata.str1.1,"aMS",@progbits,1
 300               	.LC0:
 301 0000 5465 6D70 		.string	"Temp:        C"
 301      3A20 2020 
 301      2020 2020 
 301      2043 00
 302               	.LC1:
 303 000f 5643 433A 		.string	"VCC:     mV"
 303      2020 2020 
 303      206D 5600 
 304               	.global	__floatsisf
 305               	.global	__addsf3
 306               	.global	__mulsf3
 307               	.global	__subsf3
 308               		.section	.text.startup,"ax",@progbits
 309               	.global	main
 311               	main:
 312               	.LFB12:
 129:main.c        **** 
 130:main.c        **** /*/\/\/\/\/\/\/\/\/\/\/\/\/\MAIN LOOP/\/\/\/\/\/\/\/\/\/\/\/\/\*/
 131:main.c        **** int main (void)
 132:main.c        **** {
 313               		.loc 1 132 1 is_stmt 1 view -0
 314               		.cfi_startproc
 315 0000 CDB7      		in r28,__SP_L__
 316 0002 DEB7      		in r29,__SP_H__
 317               	.LCFI1:
 318               		.cfi_def_cfa_register 28
 319 0004 A097      		sbiw r28,32
 320               	.LCFI2:
 321               		.cfi_def_cfa_offset 34
 322 0006 0FB6      		in __tmp_reg__,__SREG__
 323 0008 F894      		cli
 324 000a DEBF      		out __SP_H__,r29
 325 000c 0FBE      		out __SREG__,__tmp_reg__
 326 000e CDBF      		out __SP_L__,r28
 327               	/* prologue: function */
 328               	/* frame size = 32 */
 329               	/* stack size = 32 */
 330               	.L__stack_usage = 32
 133:main.c        ****   hardware_init();
 331               		.loc 1 133 3 view .LVU95
 332 0010 00D0      		rcall hardware_init
 333               	.LVL17:
 134:main.c        ****   timer1_init();
 334               		.loc 1 134 3 view .LVU96
 335 0012 00D0      		rcall timer1_init
 336               	.LVL18:
 135:main.c        ****   sei();
 337               		.loc 1 135 2 view .LVU97
 338               	/* #APP */
 339               	 ;  135 "main.c" 1
 340 0014 7894      		sei
 341               	 ;  0 "" 2
 136:main.c        ****   int vcc;
 342               		.loc 1 136 3 view .LVU98
 137:main.c        ****   float millis;
 343               		.loc 1 137 3 view .LVU99
 138:main.c        ****   float kelvin;
 344               		.loc 1 138 3 view .LVU100
 139:main.c        ****   float celcius;
 345               		.loc 1 139 3 view .LVU101
 140:main.c        ****   int celcius_rounded;
 346               		.loc 1 140 3 view .LVU102
 141:main.c        ****   char vccText[16];
 347               		.loc 1 141 3 view .LVU103
 142:main.c        ****   char celciusText[16];
 348               		.loc 1 142 3 view .LVU104
 143:main.c        **** 
 144:main.c        ****   ssd1306tx_stringxy(ssd1306xled_font8x16data, 0, 0, "Temp:        C");
 349               		.loc 1 144 3 view .LVU105
 350               	/* #NOAPP */
 351 0016 20E0      		ldi r18,lo8(.LC0)
 352 0018 30E0      		ldi r19,hi8(.LC0)
 353 001a 40E0      		ldi r20,0
 354 001c 60E0      		ldi r22,0
 355 001e 80E0      		ldi r24,lo8(ssd1306xled_font8x16data)
 356 0020 90E0      		ldi r25,hi8(ssd1306xled_font8x16data)
 357 0022 00D0      		rcall ssd1306tx_stringxy
 358               	.LVL19:
 145:main.c        ****   ssd1306tx_stringxy(ssd1306xled_font8x16data, 0, 2, "VCC:     mV");
 359               		.loc 1 145 3 view .LVU106
 360 0024 20E0      		ldi r18,lo8(.LC1)
 361 0026 30E0      		ldi r19,hi8(.LC1)
 362 0028 42E0      		ldi r20,lo8(2)
 363 002a 60E0      		ldi r22,0
 364 002c 80E0      		ldi r24,lo8(ssd1306xled_font8x16data)
 365 002e 90E0      		ldi r25,hi8(ssd1306xled_font8x16data)
 366 0030 00D0      		rcall ssd1306tx_stringxy
 367               	.LVL20:
 368               	.LBB10:
 146:main.c        **** 
 147:main.c        ****   while(1){
 148:main.c        ****     if(doIt == 1){
 149:main.c        **** 
 150:main.c        ****       //MEASURE INTERNAL VOLTAGE
 151:main.c        ****       vcc = 0;
 152:main.c        ****       for(int i = 0; i < 3; i++){
 153:main.c        ****         vcc = vcc + read_VCC();
 154:main.c        ****       }
 155:main.c        ****       vcc = vcc/3;
 369               		.loc 1 155 11 is_stmt 0 view .LVU107
 370 0032 93E0      		ldi r25,lo8(3)
 371 0034 E92E      		mov r14,r25
 372 0036 F12C      		mov r15,__zero_reg__
 373               	.L12:
 374               	.LBE10:
 147:main.c        ****     if(doIt == 1){
 375               		.loc 1 147 3 is_stmt 1 view .LVU108
 148:main.c        **** 
 376               		.loc 1 148 5 view .LVU109
 148:main.c        **** 
 377               		.loc 1 148 13 is_stmt 0 view .LVU110
 378 0038 8091 0000 		lds r24,doIt
 379 003c 9091 0000 		lds r25,doIt+1
 148:main.c        **** 
 380               		.loc 1 148 7 view .LVU111
 381 0040 0197      		sbiw r24,1
 382 0042 01F4      		brne .L12
 383               	.LVL21:
 384               	.LBB14:
 385               	.LBB11:
 153:main.c        ****       }
 386               		.loc 1 153 9 is_stmt 1 view .LVU112
 153:main.c        ****       }
 387               		.loc 1 153 21 is_stmt 0 view .LVU113
 388 0044 00D0      		rcall read_VCC
 389               	.LVL22:
 390 0046 8C01      		movw r16,r24
 391               	.LVL23:
 153:main.c        ****       }
 392               		.loc 1 153 9 is_stmt 1 view .LVU114
 153:main.c        ****       }
 393               		.loc 1 153 21 is_stmt 0 view .LVU115
 394 0048 00D0      		rcall read_VCC
 395               	.LVL24:
 153:main.c        ****       }
 396               		.loc 1 153 13 view .LVU116
 397 004a 080F      		add r16,r24
 398 004c 191F      		adc r17,r25
 399               	.LVL25:
 153:main.c        ****       }
 400               		.loc 1 153 9 is_stmt 1 view .LVU117
 153:main.c        ****       }
 401               		.loc 1 153 21 is_stmt 0 view .LVU118
 402 004e 00D0      		rcall read_VCC
 403               	.LVL26:
 153:main.c        ****       }
 404               		.loc 1 153 13 view .LVU119
 405 0050 800F      		add r24,r16
 406 0052 911F      		adc r25,r17
 407               	.LVL27:
 153:main.c        ****       }
 408               		.loc 1 153 13 view .LVU120
 409               	.LBE11:
 410               		.loc 1 155 7 is_stmt 1 view .LVU121
 411               		.loc 1 155 11 is_stmt 0 view .LVU122
 412 0054 B701      		movw r22,r14
 413 0056 00D0      		rcall __divmodhi4
 414               	.LVL28:
 415               		.loc 1 155 11 view .LVU123
 416 0058 8B01      		movw r16,r22
 417               	.LVL29:
 156:main.c        ****       itoa(vcc,vccText,10);
 418               		.loc 1 156 7 is_stmt 1 view .LVU124
 419 005a 4AE0      		ldi r20,lo8(10)
 420 005c 50E0      		ldi r21,0
 421 005e BE01      		movw r22,r28
 422 0060 6F5E      		subi r22,-17
 423 0062 7F4F      		sbci r23,-1
 424 0064 C801      		movw r24,r16
 425 0066 00D0      		rcall itoa
 426               	.LVL30:
 157:main.c        ****       ssd1306tx_stringxy(ssd1306xled_font8x16data, 36, 2, vccText);
 427               		.loc 1 157 7 view .LVU125
 428 0068 9E01      		movw r18,r28
 429 006a 2F5E      		subi r18,-17
 430 006c 3F4F      		sbci r19,-1
 431 006e 42E0      		ldi r20,lo8(2)
 432 0070 64E2      		ldi r22,lo8(36)
 433 0072 80E0      		ldi r24,lo8(ssd1306xled_font8x16data)
 434 0074 90E0      		ldi r25,hi8(ssd1306xled_font8x16data)
 435 0076 00D0      		rcall ssd1306tx_stringxy
 436               	.LVL31:
 158:main.c        **** 
 159:main.c        ****       //MEASURE TEMP SENSOR VOLTAGE
 160:main.c        ****       millis = 0;
 437               		.loc 1 160 7 view .LVU126
 161:main.c        ****       for(int i = 0; i < 5; i++){
 438               		.loc 1 161 7 view .LVU127
 439               	.LBB12:
 440               		.loc 1 161 11 view .LVU128
 441               		.loc 1 161 11 is_stmt 0 view .LVU129
 442               	.LBE12:
 157:main.c        ****       ssd1306tx_stringxy(ssd1306xled_font8x16data, 36, 2, vccText);
 443               		.loc 1 157 7 view .LVU130
 444 0078 85E0      		ldi r24,lo8(5)
 445 007a C82E      		mov r12,r24
 446 007c D12C      		mov r13,__zero_reg__
 160:main.c        ****       for(int i = 0; i < 5; i++){
 447               		.loc 1 160 14 view .LVU131
 448 007e 812C      		mov r8,__zero_reg__
 449 0080 912C      		mov r9,__zero_reg__
 450 0082 5401      		movw r10,r8
 451               	.LVL32:
 452               	.L13:
 453               	.LBB13:
 162:main.c        ****         millis = millis + read_ADC(1,1);
 454               		.loc 1 162 9 is_stmt 1 discriminator 3 view .LVU132
 455               		.loc 1 162 27 is_stmt 0 discriminator 3 view .LVU133
 456 0084 61E0      		ldi r22,lo8(1)
 457 0086 81E0      		ldi r24,lo8(1)
 458 0088 00D0      		rcall read_ADC
 459               	.LVL33:
 460               		.loc 1 162 25 discriminator 3 view .LVU134
 461 008a BC01      		movw r22,r24
 462 008c 990F      		lsl r25
 463 008e 880B      		sbc r24,r24
 464 0090 990B      		sbc r25,r25
 465 0092 00D0      		rcall __floatsisf
 466               	.LVL34:
 467 0094 9B01      		movw r18,r22
 468 0096 AC01      		movw r20,r24
 469               		.loc 1 162 16 discriminator 3 view .LVU135
 470 0098 C501      		movw r24,r10
 471 009a B401      		movw r22,r8
 472 009c 00D0      		rcall __addsf3
 473               	.LVL35:
 474 009e 4B01      		movw r8,r22
 475               	.LVL36:
 476               		.loc 1 162 16 discriminator 3 view .LVU136
 477 00a0 5C01      		movw r10,r24
 478               	.LVL37:
 479               		.loc 1 162 16 discriminator 3 view .LVU137
 480 00a2 81E0      		ldi r24,1
 481 00a4 C81A      		sub r12,r24
 482 00a6 D108      		sbc r13,__zero_reg__
 483               	.LVL38:
 161:main.c        ****       for(int i = 0; i < 5; i++){
 484               		.loc 1 161 7 discriminator 3 view .LVU138
 485 00a8 01F4      		brne .L13
 486               	.LBE13:
 163:main.c        ****       }
 164:main.c        ****       millis = millis/5;
 487               		.loc 1 164 7 is_stmt 1 view .LVU139
 488               	.LVL39:
 165:main.c        ****       kelvin = (vcc*millis)/(1024*10);
 489               		.loc 1 165 7 view .LVU140
 166:main.c        ****       celcius = kelvin - 273.15;
 490               		.loc 1 166 7 view .LVU141
 167:main.c        ****       ssd1306tx_stringxy(ssd1306xled_font8x16data, 36, 0, dtostrf(celcius, 5, 1, celciusText));
 491               		.loc 1 167 7 view .LVU142
 165:main.c        ****       kelvin = (vcc*millis)/(1024*10);
 492               		.loc 1 165 20 is_stmt 0 view .LVU143
 493 00aa B801      		movw r22,r16
 494 00ac 110F      		lsl r17
 495 00ae 880B      		sbc r24,r24
 496 00b0 990B      		sbc r25,r25
 497 00b2 00D0      		rcall __floatsisf
 498               	.LVL40:
 499 00b4 2B01      		movw r4,r22
 500 00b6 3C01      		movw r6,r24
 164:main.c        ****       kelvin = (vcc*millis)/(1024*10);
 501               		.loc 1 164 14 view .LVU144
 502 00b8 20E0      		ldi r18,0
 503 00ba 30E0      		ldi r19,0
 504 00bc 40EA      		ldi r20,lo8(-96)
 505 00be 50E4      		ldi r21,lo8(64)
 506 00c0 C501      		movw r24,r10
 507 00c2 B401      		movw r22,r8
 508 00c4 00D0      		rcall __divsf3
 509               	.LVL41:
 510 00c6 9B01      		movw r18,r22
 511 00c8 AC01      		movw r20,r24
 165:main.c        ****       celcius = kelvin - 273.15;
 512               		.loc 1 165 20 view .LVU145
 513 00ca C301      		movw r24,r6
 514 00cc B201      		movw r22,r4
 515 00ce 00D0      		rcall __mulsf3
 516               	.LVL42:
 165:main.c        ****       celcius = kelvin - 273.15;
 517               		.loc 1 165 14 view .LVU146
 518 00d0 20E0      		ldi r18,0
 519 00d2 30E0      		ldi r19,0
 520 00d4 40E2      		ldi r20,lo8(32)
 521 00d6 56E4      		ldi r21,lo8(70)
 522 00d8 00D0      		rcall __divsf3
 523               	.LVL43:
 166:main.c        ****       ssd1306tx_stringxy(ssd1306xled_font8x16data, 36, 0, dtostrf(celcius, 5, 1, celciusText));
 524               		.loc 1 166 15 view .LVU147
 525 00da 23E3      		ldi r18,lo8(51)
 526 00dc 33E9      		ldi r19,lo8(-109)
 527 00de 48E8      		ldi r20,lo8(-120)
 528 00e0 53E4      		ldi r21,lo8(67)
 529 00e2 00D0      		rcall __subsf3
 530               	.LVL44:
 531               		.loc 1 167 59 view .LVU148
 532 00e4 8E01      		movw r16,r28
 533               	.LVL45:
 534               		.loc 1 167 59 view .LVU149
 535 00e6 0F5F      		subi r16,-1
 536 00e8 1F4F      		sbci r17,-1
 537 00ea 21E0      		ldi r18,lo8(1)
 538 00ec 30E0      		ldi r19,0
 539 00ee 45E0      		ldi r20,lo8(5)
 540 00f0 50E0      		ldi r21,0
 541 00f2 00D0      		rcall dtostrf
 542               	.LVL46:
 543               		.loc 1 167 7 view .LVU150
 544 00f4 9C01      		movw r18,r24
 545 00f6 40E0      		ldi r20,0
 546 00f8 64E2      		ldi r22,lo8(36)
 547 00fa 80E0      		ldi r24,lo8(ssd1306xled_font8x16data)
 548 00fc 90E0      		ldi r25,hi8(ssd1306xled_font8x16data)
 549 00fe 00D0      		rcall ssd1306tx_stringxy
 550               	.LVL47:
 168:main.c        ****       doIt = 0;
 551               		.loc 1 168 7 is_stmt 1 view .LVU151
 552               		.loc 1 168 12 is_stmt 0 view .LVU152
 553 0100 1092 0000 		sts doIt+1,__zero_reg__
 554 0104 1092 0000 		sts doIt,__zero_reg__
 555 0108 00C0      		rjmp .L12
 556               	.LBE14:
 557               		.cfi_endproc
 558               	.LFE12:
 560               	.global	doIt
 561               		.section .bss
 564               	doIt:
 565 0000 0000      		.zero	2
 566               	.global	i
 569               	i:
 570 0002 0000      		.zero	2
 571               	.global	ssd1306xled_font8x16data
 572               		.section	.progmem.data,"a",@progbits
 575               	ssd1306xled_font8x16data:
 576 0000 00        		.byte	0
 577 0001 00        		.byte	0
 578 0002 00        		.byte	0
 579 0003 00        		.byte	0
 580 0004 00        		.byte	0
 581 0005 00        		.byte	0
 582 0006 00        		.byte	0
 583 0007 00        		.byte	0
 584 0008 00        		.byte	0
 585 0009 00        		.byte	0
 586 000a 00        		.byte	0
 587 000b 00        		.byte	0
 588 000c 00        		.byte	0
 589 000d 00        		.byte	0
 590 000e 00        		.byte	0
 591 000f 00        		.byte	0
 592 0010 00        		.byte	0
 593 0011 00        		.byte	0
 594 0012 00        		.byte	0
 595 0013 F8        		.byte	-8
 596 0014 00        		.byte	0
 597 0015 00        		.byte	0
 598 0016 00        		.byte	0
 599 0017 00        		.byte	0
 600 0018 00        		.byte	0
 601 0019 00        		.byte	0
 602 001a 00        		.byte	0
 603 001b 33        		.byte	51
 604 001c 30        		.byte	48
 605 001d 00        		.byte	0
 606 001e 00        		.byte	0
 607 001f 00        		.byte	0
 608 0020 00        		.byte	0
 609 0021 10        		.byte	16
 610 0022 0C        		.byte	12
 611 0023 06        		.byte	6
 612 0024 10        		.byte	16
 613 0025 0C        		.byte	12
 614 0026 06        		.byte	6
 615 0027 00        		.byte	0
 616 0028 00        		.byte	0
 617 0029 00        		.byte	0
 618 002a 00        		.byte	0
 619 002b 00        		.byte	0
 620 002c 00        		.byte	0
 621 002d 00        		.byte	0
 622 002e 00        		.byte	0
 623 002f 00        		.byte	0
 624 0030 40        		.byte	64
 625 0031 C0        		.byte	-64
 626 0032 78        		.byte	120
 627 0033 40        		.byte	64
 628 0034 C0        		.byte	-64
 629 0035 78        		.byte	120
 630 0036 40        		.byte	64
 631 0037 00        		.byte	0
 632 0038 04        		.byte	4
 633 0039 3F        		.byte	63
 634 003a 04        		.byte	4
 635 003b 04        		.byte	4
 636 003c 3F        		.byte	63
 637 003d 04        		.byte	4
 638 003e 04        		.byte	4
 639 003f 00        		.byte	0
 640 0040 00        		.byte	0
 641 0041 70        		.byte	112
 642 0042 88        		.byte	-120
 643 0043 FC        		.byte	-4
 644 0044 08        		.byte	8
 645 0045 30        		.byte	48
 646 0046 00        		.byte	0
 647 0047 00        		.byte	0
 648 0048 00        		.byte	0
 649 0049 18        		.byte	24
 650 004a 20        		.byte	32
 651 004b FF        		.byte	-1
 652 004c 21        		.byte	33
 653 004d 1E        		.byte	30
 654 004e 00        		.byte	0
 655 004f 00        		.byte	0
 656 0050 F0        		.byte	-16
 657 0051 08        		.byte	8
 658 0052 F0        		.byte	-16
 659 0053 00        		.byte	0
 660 0054 E0        		.byte	-32
 661 0055 18        		.byte	24
 662 0056 00        		.byte	0
 663 0057 00        		.byte	0
 664 0058 00        		.byte	0
 665 0059 21        		.byte	33
 666 005a 1C        		.byte	28
 667 005b 03        		.byte	3
 668 005c 1E        		.byte	30
 669 005d 21        		.byte	33
 670 005e 1E        		.byte	30
 671 005f 00        		.byte	0
 672 0060 00        		.byte	0
 673 0061 F0        		.byte	-16
 674 0062 08        		.byte	8
 675 0063 88        		.byte	-120
 676 0064 70        		.byte	112
 677 0065 00        		.byte	0
 678 0066 00        		.byte	0
 679 0067 00        		.byte	0
 680 0068 1E        		.byte	30
 681 0069 21        		.byte	33
 682 006a 23        		.byte	35
 683 006b 24        		.byte	36
 684 006c 19        		.byte	25
 685 006d 27        		.byte	39
 686 006e 21        		.byte	33
 687 006f 10        		.byte	16
 688 0070 10        		.byte	16
 689 0071 16        		.byte	22
 690 0072 0E        		.byte	14
 691 0073 00        		.byte	0
 692 0074 00        		.byte	0
 693 0075 00        		.byte	0
 694 0076 00        		.byte	0
 695 0077 00        		.byte	0
 696 0078 00        		.byte	0
 697 0079 00        		.byte	0
 698 007a 00        		.byte	0
 699 007b 00        		.byte	0
 700 007c 00        		.byte	0
 701 007d 00        		.byte	0
 702 007e 00        		.byte	0
 703 007f 00        		.byte	0
 704 0080 00        		.byte	0
 705 0081 00        		.byte	0
 706 0082 00        		.byte	0
 707 0083 E0        		.byte	-32
 708 0084 18        		.byte	24
 709 0085 04        		.byte	4
 710 0086 02        		.byte	2
 711 0087 00        		.byte	0
 712 0088 00        		.byte	0
 713 0089 00        		.byte	0
 714 008a 00        		.byte	0
 715 008b 07        		.byte	7
 716 008c 18        		.byte	24
 717 008d 20        		.byte	32
 718 008e 40        		.byte	64
 719 008f 00        		.byte	0
 720 0090 00        		.byte	0
 721 0091 02        		.byte	2
 722 0092 04        		.byte	4
 723 0093 18        		.byte	24
 724 0094 E0        		.byte	-32
 725 0095 00        		.byte	0
 726 0096 00        		.byte	0
 727 0097 00        		.byte	0
 728 0098 00        		.byte	0
 729 0099 40        		.byte	64
 730 009a 20        		.byte	32
 731 009b 18        		.byte	24
 732 009c 07        		.byte	7
 733 009d 00        		.byte	0
 734 009e 00        		.byte	0
 735 009f 00        		.byte	0
 736 00a0 40        		.byte	64
 737 00a1 40        		.byte	64
 738 00a2 80        		.byte	-128
 739 00a3 F0        		.byte	-16
 740 00a4 80        		.byte	-128
 741 00a5 40        		.byte	64
 742 00a6 40        		.byte	64
 743 00a7 00        		.byte	0
 744 00a8 02        		.byte	2
 745 00a9 02        		.byte	2
 746 00aa 01        		.byte	1
 747 00ab 0F        		.byte	15
 748 00ac 01        		.byte	1
 749 00ad 02        		.byte	2
 750 00ae 02        		.byte	2
 751 00af 00        		.byte	0
 752 00b0 00        		.byte	0
 753 00b1 00        		.byte	0
 754 00b2 00        		.byte	0
 755 00b3 F0        		.byte	-16
 756 00b4 00        		.byte	0
 757 00b5 00        		.byte	0
 758 00b6 00        		.byte	0
 759 00b7 00        		.byte	0
 760 00b8 01        		.byte	1
 761 00b9 01        		.byte	1
 762 00ba 01        		.byte	1
 763 00bb 1F        		.byte	31
 764 00bc 01        		.byte	1
 765 00bd 01        		.byte	1
 766 00be 01        		.byte	1
 767 00bf 00        		.byte	0
 768 00c0 00        		.byte	0
 769 00c1 00        		.byte	0
 770 00c2 00        		.byte	0
 771 00c3 00        		.byte	0
 772 00c4 00        		.byte	0
 773 00c5 00        		.byte	0
 774 00c6 00        		.byte	0
 775 00c7 00        		.byte	0
 776 00c8 80        		.byte	-128
 777 00c9 B0        		.byte	-80
 778 00ca 70        		.byte	112
 779 00cb 00        		.byte	0
 780 00cc 00        		.byte	0
 781 00cd 00        		.byte	0
 782 00ce 00        		.byte	0
 783 00cf 00        		.byte	0
 784 00d0 00        		.byte	0
 785 00d1 00        		.byte	0
 786 00d2 00        		.byte	0
 787 00d3 00        		.byte	0
 788 00d4 00        		.byte	0
 789 00d5 00        		.byte	0
 790 00d6 00        		.byte	0
 791 00d7 00        		.byte	0
 792 00d8 00        		.byte	0
 793 00d9 01        		.byte	1
 794 00da 01        		.byte	1
 795 00db 01        		.byte	1
 796 00dc 01        		.byte	1
 797 00dd 01        		.byte	1
 798 00de 01        		.byte	1
 799 00df 01        		.byte	1
 800 00e0 00        		.byte	0
 801 00e1 00        		.byte	0
 802 00e2 00        		.byte	0
 803 00e3 00        		.byte	0
 804 00e4 00        		.byte	0
 805 00e5 00        		.byte	0
 806 00e6 00        		.byte	0
 807 00e7 00        		.byte	0
 808 00e8 00        		.byte	0
 809 00e9 30        		.byte	48
 810 00ea 30        		.byte	48
 811 00eb 00        		.byte	0
 812 00ec 00        		.byte	0
 813 00ed 00        		.byte	0
 814 00ee 00        		.byte	0
 815 00ef 00        		.byte	0
 816 00f0 00        		.byte	0
 817 00f1 00        		.byte	0
 818 00f2 00        		.byte	0
 819 00f3 00        		.byte	0
 820 00f4 80        		.byte	-128
 821 00f5 60        		.byte	96
 822 00f6 18        		.byte	24
 823 00f7 04        		.byte	4
 824 00f8 00        		.byte	0
 825 00f9 60        		.byte	96
 826 00fa 18        		.byte	24
 827 00fb 06        		.byte	6
 828 00fc 01        		.byte	1
 829 00fd 00        		.byte	0
 830 00fe 00        		.byte	0
 831 00ff 00        		.byte	0
 832 0100 00        		.byte	0
 833 0101 E0        		.byte	-32
 834 0102 10        		.byte	16
 835 0103 08        		.byte	8
 836 0104 08        		.byte	8
 837 0105 10        		.byte	16
 838 0106 E0        		.byte	-32
 839 0107 00        		.byte	0
 840 0108 00        		.byte	0
 841 0109 0F        		.byte	15
 842 010a 10        		.byte	16
 843 010b 20        		.byte	32
 844 010c 20        		.byte	32
 845 010d 10        		.byte	16
 846 010e 0F        		.byte	15
 847 010f 00        		.byte	0
 848 0110 00        		.byte	0
 849 0111 10        		.byte	16
 850 0112 10        		.byte	16
 851 0113 F8        		.byte	-8
 852 0114 00        		.byte	0
 853 0115 00        		.byte	0
 854 0116 00        		.byte	0
 855 0117 00        		.byte	0
 856 0118 00        		.byte	0
 857 0119 20        		.byte	32
 858 011a 20        		.byte	32
 859 011b 3F        		.byte	63
 860 011c 20        		.byte	32
 861 011d 20        		.byte	32
 862 011e 00        		.byte	0
 863 011f 00        		.byte	0
 864 0120 00        		.byte	0
 865 0121 70        		.byte	112
 866 0122 08        		.byte	8
 867 0123 08        		.byte	8
 868 0124 08        		.byte	8
 869 0125 88        		.byte	-120
 870 0126 70        		.byte	112
 871 0127 00        		.byte	0
 872 0128 00        		.byte	0
 873 0129 30        		.byte	48
 874 012a 28        		.byte	40
 875 012b 24        		.byte	36
 876 012c 22        		.byte	34
 877 012d 21        		.byte	33
 878 012e 30        		.byte	48
 879 012f 00        		.byte	0
 880 0130 00        		.byte	0
 881 0131 30        		.byte	48
 882 0132 08        		.byte	8
 883 0133 88        		.byte	-120
 884 0134 88        		.byte	-120
 885 0135 48        		.byte	72
 886 0136 30        		.byte	48
 887 0137 00        		.byte	0
 888 0138 00        		.byte	0
 889 0139 18        		.byte	24
 890 013a 20        		.byte	32
 891 013b 20        		.byte	32
 892 013c 20        		.byte	32
 893 013d 11        		.byte	17
 894 013e 0E        		.byte	14
 895 013f 00        		.byte	0
 896 0140 00        		.byte	0
 897 0141 00        		.byte	0
 898 0142 C0        		.byte	-64
 899 0143 20        		.byte	32
 900 0144 10        		.byte	16
 901 0145 F8        		.byte	-8
 902 0146 00        		.byte	0
 903 0147 00        		.byte	0
 904 0148 00        		.byte	0
 905 0149 07        		.byte	7
 906 014a 04        		.byte	4
 907 014b 24        		.byte	36
 908 014c 24        		.byte	36
 909 014d 3F        		.byte	63
 910 014e 24        		.byte	36
 911 014f 00        		.byte	0
 912 0150 00        		.byte	0
 913 0151 F8        		.byte	-8
 914 0152 08        		.byte	8
 915 0153 88        		.byte	-120
 916 0154 88        		.byte	-120
 917 0155 08        		.byte	8
 918 0156 08        		.byte	8
 919 0157 00        		.byte	0
 920 0158 00        		.byte	0
 921 0159 19        		.byte	25
 922 015a 21        		.byte	33
 923 015b 20        		.byte	32
 924 015c 20        		.byte	32
 925 015d 11        		.byte	17
 926 015e 0E        		.byte	14
 927 015f 00        		.byte	0
 928 0160 00        		.byte	0
 929 0161 E0        		.byte	-32
 930 0162 10        		.byte	16
 931 0163 88        		.byte	-120
 932 0164 88        		.byte	-120
 933 0165 18        		.byte	24
 934 0166 00        		.byte	0
 935 0167 00        		.byte	0
 936 0168 00        		.byte	0
 937 0169 0F        		.byte	15
 938 016a 11        		.byte	17
 939 016b 20        		.byte	32
 940 016c 20        		.byte	32
 941 016d 11        		.byte	17
 942 016e 0E        		.byte	14
 943 016f 00        		.byte	0
 944 0170 00        		.byte	0
 945 0171 38        		.byte	56
 946 0172 08        		.byte	8
 947 0173 08        		.byte	8
 948 0174 C8        		.byte	-56
 949 0175 38        		.byte	56
 950 0176 08        		.byte	8
 951 0177 00        		.byte	0
 952 0178 00        		.byte	0
 953 0179 00        		.byte	0
 954 017a 00        		.byte	0
 955 017b 3F        		.byte	63
 956 017c 00        		.byte	0
 957 017d 00        		.byte	0
 958 017e 00        		.byte	0
 959 017f 00        		.byte	0
 960 0180 00        		.byte	0
 961 0181 70        		.byte	112
 962 0182 88        		.byte	-120
 963 0183 08        		.byte	8
 964 0184 08        		.byte	8
 965 0185 88        		.byte	-120
 966 0186 70        		.byte	112
 967 0187 00        		.byte	0
 968 0188 00        		.byte	0
 969 0189 1C        		.byte	28
 970 018a 22        		.byte	34
 971 018b 21        		.byte	33
 972 018c 21        		.byte	33
 973 018d 22        		.byte	34
 974 018e 1C        		.byte	28
 975 018f 00        		.byte	0
 976 0190 00        		.byte	0
 977 0191 E0        		.byte	-32
 978 0192 10        		.byte	16
 979 0193 08        		.byte	8
 980 0194 08        		.byte	8
 981 0195 10        		.byte	16
 982 0196 E0        		.byte	-32
 983 0197 00        		.byte	0
 984 0198 00        		.byte	0
 985 0199 00        		.byte	0
 986 019a 31        		.byte	49
 987 019b 22        		.byte	34
 988 019c 22        		.byte	34
 989 019d 11        		.byte	17
 990 019e 0F        		.byte	15
 991 019f 00        		.byte	0
 992 01a0 00        		.byte	0
 993 01a1 00        		.byte	0
 994 01a2 00        		.byte	0
 995 01a3 C0        		.byte	-64
 996 01a4 C0        		.byte	-64
 997 01a5 00        		.byte	0
 998 01a6 00        		.byte	0
 999 01a7 00        		.byte	0
 1000 01a8 00        		.byte	0
 1001 01a9 00        		.byte	0
 1002 01aa 00        		.byte	0
 1003 01ab 30        		.byte	48
 1004 01ac 30        		.byte	48
 1005 01ad 00        		.byte	0
 1006 01ae 00        		.byte	0
 1007 01af 00        		.byte	0
 1008 01b0 00        		.byte	0
 1009 01b1 00        		.byte	0
 1010 01b2 00        		.byte	0
 1011 01b3 80        		.byte	-128
 1012 01b4 00        		.byte	0
 1013 01b5 00        		.byte	0
 1014 01b6 00        		.byte	0
 1015 01b7 00        		.byte	0
 1016 01b8 00        		.byte	0
 1017 01b9 00        		.byte	0
 1018 01ba 80        		.byte	-128
 1019 01bb 60        		.byte	96
 1020 01bc 00        		.byte	0
 1021 01bd 00        		.byte	0
 1022 01be 00        		.byte	0
 1023 01bf 00        		.byte	0
 1024 01c0 00        		.byte	0
 1025 01c1 00        		.byte	0
 1026 01c2 80        		.byte	-128
 1027 01c3 40        		.byte	64
 1028 01c4 20        		.byte	32
 1029 01c5 10        		.byte	16
 1030 01c6 08        		.byte	8
 1031 01c7 00        		.byte	0
 1032 01c8 00        		.byte	0
 1033 01c9 01        		.byte	1
 1034 01ca 02        		.byte	2
 1035 01cb 04        		.byte	4
 1036 01cc 08        		.byte	8
 1037 01cd 10        		.byte	16
 1038 01ce 20        		.byte	32
 1039 01cf 00        		.byte	0
 1040 01d0 40        		.byte	64
 1041 01d1 40        		.byte	64
 1042 01d2 40        		.byte	64
 1043 01d3 40        		.byte	64
 1044 01d4 40        		.byte	64
 1045 01d5 40        		.byte	64
 1046 01d6 40        		.byte	64
 1047 01d7 00        		.byte	0
 1048 01d8 04        		.byte	4
 1049 01d9 04        		.byte	4
 1050 01da 04        		.byte	4
 1051 01db 04        		.byte	4
 1052 01dc 04        		.byte	4
 1053 01dd 04        		.byte	4
 1054 01de 04        		.byte	4
 1055 01df 00        		.byte	0
 1056 01e0 00        		.byte	0
 1057 01e1 08        		.byte	8
 1058 01e2 10        		.byte	16
 1059 01e3 20        		.byte	32
 1060 01e4 40        		.byte	64
 1061 01e5 80        		.byte	-128
 1062 01e6 00        		.byte	0
 1063 01e7 00        		.byte	0
 1064 01e8 00        		.byte	0
 1065 01e9 20        		.byte	32
 1066 01ea 10        		.byte	16
 1067 01eb 08        		.byte	8
 1068 01ec 04        		.byte	4
 1069 01ed 02        		.byte	2
 1070 01ee 01        		.byte	1
 1071 01ef 00        		.byte	0
 1072 01f0 00        		.byte	0
 1073 01f1 70        		.byte	112
 1074 01f2 48        		.byte	72
 1075 01f3 08        		.byte	8
 1076 01f4 08        		.byte	8
 1077 01f5 08        		.byte	8
 1078 01f6 F0        		.byte	-16
 1079 01f7 00        		.byte	0
 1080 01f8 00        		.byte	0
 1081 01f9 00        		.byte	0
 1082 01fa 00        		.byte	0
 1083 01fb 30        		.byte	48
 1084 01fc 36        		.byte	54
 1085 01fd 01        		.byte	1
 1086 01fe 00        		.byte	0
 1087 01ff 00        		.byte	0
 1088 0200 C0        		.byte	-64
 1089 0201 30        		.byte	48
 1090 0202 C8        		.byte	-56
 1091 0203 28        		.byte	40
 1092 0204 E8        		.byte	-24
 1093 0205 10        		.byte	16
 1094 0206 E0        		.byte	-32
 1095 0207 00        		.byte	0
 1096 0208 07        		.byte	7
 1097 0209 18        		.byte	24
 1098 020a 27        		.byte	39
 1099 020b 24        		.byte	36
 1100 020c 23        		.byte	35
 1101 020d 14        		.byte	20
 1102 020e 0B        		.byte	11
 1103 020f 00        		.byte	0
 1104 0210 00        		.byte	0
 1105 0211 00        		.byte	0
 1106 0212 C0        		.byte	-64
 1107 0213 38        		.byte	56
 1108 0214 E0        		.byte	-32
 1109 0215 00        		.byte	0
 1110 0216 00        		.byte	0
 1111 0217 00        		.byte	0
 1112 0218 20        		.byte	32
 1113 0219 3C        		.byte	60
 1114 021a 23        		.byte	35
 1115 021b 02        		.byte	2
 1116 021c 02        		.byte	2
 1117 021d 27        		.byte	39
 1118 021e 38        		.byte	56
 1119 021f 20        		.byte	32
 1120 0220 08        		.byte	8
 1121 0221 F8        		.byte	-8
 1122 0222 88        		.byte	-120
 1123 0223 88        		.byte	-120
 1124 0224 88        		.byte	-120
 1125 0225 70        		.byte	112
 1126 0226 00        		.byte	0
 1127 0227 00        		.byte	0
 1128 0228 20        		.byte	32
 1129 0229 3F        		.byte	63
 1130 022a 20        		.byte	32
 1131 022b 20        		.byte	32
 1132 022c 20        		.byte	32
 1133 022d 11        		.byte	17
 1134 022e 0E        		.byte	14
 1135 022f 00        		.byte	0
 1136 0230 C0        		.byte	-64
 1137 0231 30        		.byte	48
 1138 0232 08        		.byte	8
 1139 0233 08        		.byte	8
 1140 0234 08        		.byte	8
 1141 0235 08        		.byte	8
 1142 0236 38        		.byte	56
 1143 0237 00        		.byte	0
 1144 0238 07        		.byte	7
 1145 0239 18        		.byte	24
 1146 023a 20        		.byte	32
 1147 023b 20        		.byte	32
 1148 023c 20        		.byte	32
 1149 023d 10        		.byte	16
 1150 023e 08        		.byte	8
 1151 023f 00        		.byte	0
 1152 0240 08        		.byte	8
 1153 0241 F8        		.byte	-8
 1154 0242 08        		.byte	8
 1155 0243 08        		.byte	8
 1156 0244 08        		.byte	8
 1157 0245 10        		.byte	16
 1158 0246 E0        		.byte	-32
 1159 0247 00        		.byte	0
 1160 0248 20        		.byte	32
 1161 0249 3F        		.byte	63
 1162 024a 20        		.byte	32
 1163 024b 20        		.byte	32
 1164 024c 20        		.byte	32
 1165 024d 10        		.byte	16
 1166 024e 0F        		.byte	15
 1167 024f 00        		.byte	0
 1168 0250 08        		.byte	8
 1169 0251 F8        		.byte	-8
 1170 0252 88        		.byte	-120
 1171 0253 88        		.byte	-120
 1172 0254 E8        		.byte	-24
 1173 0255 08        		.byte	8
 1174 0256 10        		.byte	16
 1175 0257 00        		.byte	0
 1176 0258 20        		.byte	32
 1177 0259 3F        		.byte	63
 1178 025a 20        		.byte	32
 1179 025b 20        		.byte	32
 1180 025c 23        		.byte	35
 1181 025d 20        		.byte	32
 1182 025e 18        		.byte	24
 1183 025f 00        		.byte	0
 1184 0260 08        		.byte	8
 1185 0261 F8        		.byte	-8
 1186 0262 88        		.byte	-120
 1187 0263 88        		.byte	-120
 1188 0264 E8        		.byte	-24
 1189 0265 08        		.byte	8
 1190 0266 10        		.byte	16
 1191 0267 00        		.byte	0
 1192 0268 20        		.byte	32
 1193 0269 3F        		.byte	63
 1194 026a 20        		.byte	32
 1195 026b 00        		.byte	0
 1196 026c 03        		.byte	3
 1197 026d 00        		.byte	0
 1198 026e 00        		.byte	0
 1199 026f 00        		.byte	0
 1200 0270 C0        		.byte	-64
 1201 0271 30        		.byte	48
 1202 0272 08        		.byte	8
 1203 0273 08        		.byte	8
 1204 0274 08        		.byte	8
 1205 0275 38        		.byte	56
 1206 0276 00        		.byte	0
 1207 0277 00        		.byte	0
 1208 0278 07        		.byte	7
 1209 0279 18        		.byte	24
 1210 027a 20        		.byte	32
 1211 027b 20        		.byte	32
 1212 027c 22        		.byte	34
 1213 027d 1E        		.byte	30
 1214 027e 02        		.byte	2
 1215 027f 00        		.byte	0
 1216 0280 08        		.byte	8
 1217 0281 F8        		.byte	-8
 1218 0282 08        		.byte	8
 1219 0283 00        		.byte	0
 1220 0284 00        		.byte	0
 1221 0285 08        		.byte	8
 1222 0286 F8        		.byte	-8
 1223 0287 08        		.byte	8
 1224 0288 20        		.byte	32
 1225 0289 3F        		.byte	63
 1226 028a 21        		.byte	33
 1227 028b 01        		.byte	1
 1228 028c 01        		.byte	1
 1229 028d 21        		.byte	33
 1230 028e 3F        		.byte	63
 1231 028f 20        		.byte	32
 1232 0290 00        		.byte	0
 1233 0291 08        		.byte	8
 1234 0292 08        		.byte	8
 1235 0293 F8        		.byte	-8
 1236 0294 08        		.byte	8
 1237 0295 08        		.byte	8
 1238 0296 00        		.byte	0
 1239 0297 00        		.byte	0
 1240 0298 00        		.byte	0
 1241 0299 20        		.byte	32
 1242 029a 20        		.byte	32
 1243 029b 3F        		.byte	63
 1244 029c 20        		.byte	32
 1245 029d 20        		.byte	32
 1246 029e 00        		.byte	0
 1247 029f 00        		.byte	0
 1248 02a0 00        		.byte	0
 1249 02a1 00        		.byte	0
 1250 02a2 08        		.byte	8
 1251 02a3 08        		.byte	8
 1252 02a4 F8        		.byte	-8
 1253 02a5 08        		.byte	8
 1254 02a6 08        		.byte	8
 1255 02a7 00        		.byte	0
 1256 02a8 C0        		.byte	-64
 1257 02a9 80        		.byte	-128
 1258 02aa 80        		.byte	-128
 1259 02ab 80        		.byte	-128
 1260 02ac 7F        		.byte	127
 1261 02ad 00        		.byte	0
 1262 02ae 00        		.byte	0
 1263 02af 00        		.byte	0
 1264 02b0 08        		.byte	8
 1265 02b1 F8        		.byte	-8
 1266 02b2 88        		.byte	-120
 1267 02b3 C0        		.byte	-64
 1268 02b4 28        		.byte	40
 1269 02b5 18        		.byte	24
 1270 02b6 08        		.byte	8
 1271 02b7 00        		.byte	0
 1272 02b8 20        		.byte	32
 1273 02b9 3F        		.byte	63
 1274 02ba 20        		.byte	32
 1275 02bb 01        		.byte	1
 1276 02bc 26        		.byte	38
 1277 02bd 38        		.byte	56
 1278 02be 20        		.byte	32
 1279 02bf 00        		.byte	0
 1280 02c0 08        		.byte	8
 1281 02c1 F8        		.byte	-8
 1282 02c2 08        		.byte	8
 1283 02c3 00        		.byte	0
 1284 02c4 00        		.byte	0
 1285 02c5 00        		.byte	0
 1286 02c6 00        		.byte	0
 1287 02c7 00        		.byte	0
 1288 02c8 20        		.byte	32
 1289 02c9 3F        		.byte	63
 1290 02ca 20        		.byte	32
 1291 02cb 20        		.byte	32
 1292 02cc 20        		.byte	32
 1293 02cd 20        		.byte	32
 1294 02ce 30        		.byte	48
 1295 02cf 00        		.byte	0
 1296 02d0 08        		.byte	8
 1297 02d1 F8        		.byte	-8
 1298 02d2 F8        		.byte	-8
 1299 02d3 00        		.byte	0
 1300 02d4 F8        		.byte	-8
 1301 02d5 F8        		.byte	-8
 1302 02d6 08        		.byte	8
 1303 02d7 00        		.byte	0
 1304 02d8 20        		.byte	32
 1305 02d9 3F        		.byte	63
 1306 02da 00        		.byte	0
 1307 02db 3F        		.byte	63
 1308 02dc 00        		.byte	0
 1309 02dd 3F        		.byte	63
 1310 02de 20        		.byte	32
 1311 02df 00        		.byte	0
 1312 02e0 08        		.byte	8
 1313 02e1 F8        		.byte	-8
 1314 02e2 30        		.byte	48
 1315 02e3 C0        		.byte	-64
 1316 02e4 00        		.byte	0
 1317 02e5 08        		.byte	8
 1318 02e6 F8        		.byte	-8
 1319 02e7 08        		.byte	8
 1320 02e8 20        		.byte	32
 1321 02e9 3F        		.byte	63
 1322 02ea 20        		.byte	32
 1323 02eb 00        		.byte	0
 1324 02ec 07        		.byte	7
 1325 02ed 18        		.byte	24
 1326 02ee 3F        		.byte	63
 1327 02ef 00        		.byte	0
 1328 02f0 E0        		.byte	-32
 1329 02f1 10        		.byte	16
 1330 02f2 08        		.byte	8
 1331 02f3 08        		.byte	8
 1332 02f4 08        		.byte	8
 1333 02f5 10        		.byte	16
 1334 02f6 E0        		.byte	-32
 1335 02f7 00        		.byte	0
 1336 02f8 0F        		.byte	15
 1337 02f9 10        		.byte	16
 1338 02fa 20        		.byte	32
 1339 02fb 20        		.byte	32
 1340 02fc 20        		.byte	32
 1341 02fd 10        		.byte	16
 1342 02fe 0F        		.byte	15
 1343 02ff 00        		.byte	0
 1344 0300 08        		.byte	8
 1345 0301 F8        		.byte	-8
 1346 0302 08        		.byte	8
 1347 0303 08        		.byte	8
 1348 0304 08        		.byte	8
 1349 0305 08        		.byte	8
 1350 0306 F0        		.byte	-16
 1351 0307 00        		.byte	0
 1352 0308 20        		.byte	32
 1353 0309 3F        		.byte	63
 1354 030a 21        		.byte	33
 1355 030b 01        		.byte	1
 1356 030c 01        		.byte	1
 1357 030d 01        		.byte	1
 1358 030e 00        		.byte	0
 1359 030f 00        		.byte	0
 1360 0310 E0        		.byte	-32
 1361 0311 10        		.byte	16
 1362 0312 08        		.byte	8
 1363 0313 08        		.byte	8
 1364 0314 08        		.byte	8
 1365 0315 10        		.byte	16
 1366 0316 E0        		.byte	-32
 1367 0317 00        		.byte	0
 1368 0318 0F        		.byte	15
 1369 0319 18        		.byte	24
 1370 031a 24        		.byte	36
 1371 031b 24        		.byte	36
 1372 031c 38        		.byte	56
 1373 031d 50        		.byte	80
 1374 031e 4F        		.byte	79
 1375 031f 00        		.byte	0
 1376 0320 08        		.byte	8
 1377 0321 F8        		.byte	-8
 1378 0322 88        		.byte	-120
 1379 0323 88        		.byte	-120
 1380 0324 88        		.byte	-120
 1381 0325 88        		.byte	-120
 1382 0326 70        		.byte	112
 1383 0327 00        		.byte	0
 1384 0328 20        		.byte	32
 1385 0329 3F        		.byte	63
 1386 032a 20        		.byte	32
 1387 032b 00        		.byte	0
 1388 032c 03        		.byte	3
 1389 032d 0C        		.byte	12
 1390 032e 30        		.byte	48
 1391 032f 20        		.byte	32
 1392 0330 00        		.byte	0
 1393 0331 70        		.byte	112
 1394 0332 88        		.byte	-120
 1395 0333 08        		.byte	8
 1396 0334 08        		.byte	8
 1397 0335 08        		.byte	8
 1398 0336 38        		.byte	56
 1399 0337 00        		.byte	0
 1400 0338 00        		.byte	0
 1401 0339 38        		.byte	56
 1402 033a 20        		.byte	32
 1403 033b 21        		.byte	33
 1404 033c 21        		.byte	33
 1405 033d 22        		.byte	34
 1406 033e 1C        		.byte	28
 1407 033f 00        		.byte	0
 1408 0340 18        		.byte	24
 1409 0341 08        		.byte	8
 1410 0342 08        		.byte	8
 1411 0343 F8        		.byte	-8
 1412 0344 08        		.byte	8
 1413 0345 08        		.byte	8
 1414 0346 18        		.byte	24
 1415 0347 00        		.byte	0
 1416 0348 00        		.byte	0
 1417 0349 00        		.byte	0
 1418 034a 20        		.byte	32
 1419 034b 3F        		.byte	63
 1420 034c 20        		.byte	32
 1421 034d 00        		.byte	0
 1422 034e 00        		.byte	0
 1423 034f 00        		.byte	0
 1424 0350 08        		.byte	8
 1425 0351 F8        		.byte	-8
 1426 0352 08        		.byte	8
 1427 0353 00        		.byte	0
 1428 0354 00        		.byte	0
 1429 0355 08        		.byte	8
 1430 0356 F8        		.byte	-8
 1431 0357 08        		.byte	8
 1432 0358 00        		.byte	0
 1433 0359 1F        		.byte	31
 1434 035a 20        		.byte	32
 1435 035b 20        		.byte	32
 1436 035c 20        		.byte	32
 1437 035d 20        		.byte	32
 1438 035e 1F        		.byte	31
 1439 035f 00        		.byte	0
 1440 0360 08        		.byte	8
 1441 0361 78        		.byte	120
 1442 0362 88        		.byte	-120
 1443 0363 00        		.byte	0
 1444 0364 00        		.byte	0
 1445 0365 C8        		.byte	-56
 1446 0366 38        		.byte	56
 1447 0367 08        		.byte	8
 1448 0368 00        		.byte	0
 1449 0369 00        		.byte	0
 1450 036a 07        		.byte	7
 1451 036b 38        		.byte	56
 1452 036c 0E        		.byte	14
 1453 036d 01        		.byte	1
 1454 036e 00        		.byte	0
 1455 036f 00        		.byte	0
 1456 0370 F8        		.byte	-8
 1457 0371 08        		.byte	8
 1458 0372 00        		.byte	0
 1459 0373 F8        		.byte	-8
 1460 0374 00        		.byte	0
 1461 0375 08        		.byte	8
 1462 0376 F8        		.byte	-8
 1463 0377 00        		.byte	0
 1464 0378 03        		.byte	3
 1465 0379 3C        		.byte	60
 1466 037a 07        		.byte	7
 1467 037b 00        		.byte	0
 1468 037c 07        		.byte	7
 1469 037d 3C        		.byte	60
 1470 037e 03        		.byte	3
 1471 037f 00        		.byte	0
 1472 0380 08        		.byte	8
 1473 0381 18        		.byte	24
 1474 0382 68        		.byte	104
 1475 0383 80        		.byte	-128
 1476 0384 80        		.byte	-128
 1477 0385 68        		.byte	104
 1478 0386 18        		.byte	24
 1479 0387 08        		.byte	8
 1480 0388 20        		.byte	32
 1481 0389 30        		.byte	48
 1482 038a 2C        		.byte	44
 1483 038b 03        		.byte	3
 1484 038c 03        		.byte	3
 1485 038d 2C        		.byte	44
 1486 038e 30        		.byte	48
 1487 038f 20        		.byte	32
 1488 0390 08        		.byte	8
 1489 0391 38        		.byte	56
 1490 0392 C8        		.byte	-56
 1491 0393 00        		.byte	0
 1492 0394 C8        		.byte	-56
 1493 0395 38        		.byte	56
 1494 0396 08        		.byte	8
 1495 0397 00        		.byte	0
 1496 0398 00        		.byte	0
 1497 0399 00        		.byte	0
 1498 039a 20        		.byte	32
 1499 039b 3F        		.byte	63
 1500 039c 20        		.byte	32
 1501 039d 00        		.byte	0
 1502 039e 00        		.byte	0
 1503 039f 00        		.byte	0
 1504 03a0 10        		.byte	16
 1505 03a1 08        		.byte	8
 1506 03a2 08        		.byte	8
 1507 03a3 08        		.byte	8
 1508 03a4 C8        		.byte	-56
 1509 03a5 38        		.byte	56
 1510 03a6 08        		.byte	8
 1511 03a7 00        		.byte	0
 1512 03a8 20        		.byte	32
 1513 03a9 38        		.byte	56
 1514 03aa 26        		.byte	38
 1515 03ab 21        		.byte	33
 1516 03ac 20        		.byte	32
 1517 03ad 20        		.byte	32
 1518 03ae 18        		.byte	24
 1519 03af 00        		.byte	0
 1520 03b0 00        		.byte	0
 1521 03b1 00        		.byte	0
 1522 03b2 00        		.byte	0
 1523 03b3 FE        		.byte	-2
 1524 03b4 02        		.byte	2
 1525 03b5 02        		.byte	2
 1526 03b6 02        		.byte	2
 1527 03b7 00        		.byte	0
 1528 03b8 00        		.byte	0
 1529 03b9 00        		.byte	0
 1530 03ba 00        		.byte	0
 1531 03bb 7F        		.byte	127
 1532 03bc 40        		.byte	64
 1533 03bd 40        		.byte	64
 1534 03be 40        		.byte	64
 1535 03bf 00        		.byte	0
 1536 03c0 00        		.byte	0
 1537 03c1 0C        		.byte	12
 1538 03c2 30        		.byte	48
 1539 03c3 C0        		.byte	-64
 1540 03c4 00        		.byte	0
 1541 03c5 00        		.byte	0
 1542 03c6 00        		.byte	0
 1543 03c7 00        		.byte	0
 1544 03c8 00        		.byte	0
 1545 03c9 00        		.byte	0
 1546 03ca 00        		.byte	0
 1547 03cb 01        		.byte	1
 1548 03cc 06        		.byte	6
 1549 03cd 38        		.byte	56
 1550 03ce C0        		.byte	-64
 1551 03cf 00        		.byte	0
 1552 03d0 00        		.byte	0
 1553 03d1 02        		.byte	2
 1554 03d2 02        		.byte	2
 1555 03d3 02        		.byte	2
 1556 03d4 FE        		.byte	-2
 1557 03d5 00        		.byte	0
 1558 03d6 00        		.byte	0
 1559 03d7 00        		.byte	0
 1560 03d8 00        		.byte	0
 1561 03d9 40        		.byte	64
 1562 03da 40        		.byte	64
 1563 03db 40        		.byte	64
 1564 03dc 7F        		.byte	127
 1565 03dd 00        		.byte	0
 1566 03de 00        		.byte	0
 1567 03df 00        		.byte	0
 1568 03e0 00        		.byte	0
 1569 03e1 00        		.byte	0
 1570 03e2 04        		.byte	4
 1571 03e3 02        		.byte	2
 1572 03e4 02        		.byte	2
 1573 03e5 02        		.byte	2
 1574 03e6 04        		.byte	4
 1575 03e7 00        		.byte	0
 1576 03e8 00        		.byte	0
 1577 03e9 00        		.byte	0
 1578 03ea 00        		.byte	0
 1579 03eb 00        		.byte	0
 1580 03ec 00        		.byte	0
 1581 03ed 00        		.byte	0
 1582 03ee 00        		.byte	0
 1583 03ef 00        		.byte	0
 1584 03f0 00        		.byte	0
 1585 03f1 00        		.byte	0
 1586 03f2 00        		.byte	0
 1587 03f3 00        		.byte	0
 1588 03f4 00        		.byte	0
 1589 03f5 00        		.byte	0
 1590 03f6 00        		.byte	0
 1591 03f7 00        		.byte	0
 1592 03f8 80        		.byte	-128
 1593 03f9 80        		.byte	-128
 1594 03fa 80        		.byte	-128
 1595 03fb 80        		.byte	-128
 1596 03fc 80        		.byte	-128
 1597 03fd 80        		.byte	-128
 1598 03fe 80        		.byte	-128
 1599 03ff 80        		.byte	-128
 1600 0400 00        		.byte	0
 1601 0401 02        		.byte	2
 1602 0402 02        		.byte	2
 1603 0403 04        		.byte	4
 1604 0404 00        		.byte	0
 1605 0405 00        		.byte	0
 1606 0406 00        		.byte	0
 1607 0407 00        		.byte	0
 1608 0408 00        		.byte	0
 1609 0409 00        		.byte	0
 1610 040a 00        		.byte	0
 1611 040b 00        		.byte	0
 1612 040c 00        		.byte	0
 1613 040d 00        		.byte	0
 1614 040e 00        		.byte	0
 1615 040f 00        		.byte	0
 1616 0410 00        		.byte	0
 1617 0411 00        		.byte	0
 1618 0412 80        		.byte	-128
 1619 0413 80        		.byte	-128
 1620 0414 80        		.byte	-128
 1621 0415 80        		.byte	-128
 1622 0416 00        		.byte	0
 1623 0417 00        		.byte	0
 1624 0418 00        		.byte	0
 1625 0419 19        		.byte	25
 1626 041a 24        		.byte	36
 1627 041b 22        		.byte	34
 1628 041c 22        		.byte	34
 1629 041d 22        		.byte	34
 1630 041e 3F        		.byte	63
 1631 041f 20        		.byte	32
 1632 0420 08        		.byte	8
 1633 0421 F8        		.byte	-8
 1634 0422 00        		.byte	0
 1635 0423 80        		.byte	-128
 1636 0424 80        		.byte	-128
 1637 0425 00        		.byte	0
 1638 0426 00        		.byte	0
 1639 0427 00        		.byte	0
 1640 0428 00        		.byte	0
 1641 0429 3F        		.byte	63
 1642 042a 11        		.byte	17
 1643 042b 20        		.byte	32
 1644 042c 20        		.byte	32
 1645 042d 11        		.byte	17
 1646 042e 0E        		.byte	14
 1647 042f 00        		.byte	0
 1648 0430 00        		.byte	0
 1649 0431 00        		.byte	0
 1650 0432 00        		.byte	0
 1651 0433 80        		.byte	-128
 1652 0434 80        		.byte	-128
 1653 0435 80        		.byte	-128
 1654 0436 00        		.byte	0
 1655 0437 00        		.byte	0
 1656 0438 00        		.byte	0
 1657 0439 0E        		.byte	14
 1658 043a 11        		.byte	17
 1659 043b 20        		.byte	32
 1660 043c 20        		.byte	32
 1661 043d 20        		.byte	32
 1662 043e 11        		.byte	17
 1663 043f 00        		.byte	0
 1664 0440 00        		.byte	0
 1665 0441 00        		.byte	0
 1666 0442 00        		.byte	0
 1667 0443 80        		.byte	-128
 1668 0444 80        		.byte	-128
 1669 0445 88        		.byte	-120
 1670 0446 F8        		.byte	-8
 1671 0447 00        		.byte	0
 1672 0448 00        		.byte	0
 1673 0449 0E        		.byte	14
 1674 044a 11        		.byte	17
 1675 044b 20        		.byte	32
 1676 044c 20        		.byte	32
 1677 044d 10        		.byte	16
 1678 044e 3F        		.byte	63
 1679 044f 20        		.byte	32
 1680 0450 00        		.byte	0
 1681 0451 00        		.byte	0
 1682 0452 80        		.byte	-128
 1683 0453 80        		.byte	-128
 1684 0454 80        		.byte	-128
 1685 0455 80        		.byte	-128
 1686 0456 00        		.byte	0
 1687 0457 00        		.byte	0
 1688 0458 00        		.byte	0
 1689 0459 1F        		.byte	31
 1690 045a 22        		.byte	34
 1691 045b 22        		.byte	34
 1692 045c 22        		.byte	34
 1693 045d 22        		.byte	34
 1694 045e 13        		.byte	19
 1695 045f 00        		.byte	0
 1696 0460 00        		.byte	0
 1697 0461 80        		.byte	-128
 1698 0462 80        		.byte	-128
 1699 0463 F0        		.byte	-16
 1700 0464 88        		.byte	-120
 1701 0465 88        		.byte	-120
 1702 0466 88        		.byte	-120
 1703 0467 18        		.byte	24
 1704 0468 00        		.byte	0
 1705 0469 20        		.byte	32
 1706 046a 20        		.byte	32
 1707 046b 3F        		.byte	63
 1708 046c 20        		.byte	32
 1709 046d 20        		.byte	32
 1710 046e 00        		.byte	0
 1711 046f 00        		.byte	0
 1712 0470 00        		.byte	0
 1713 0471 00        		.byte	0
 1714 0472 80        		.byte	-128
 1715 0473 80        		.byte	-128
 1716 0474 80        		.byte	-128
 1717 0475 80        		.byte	-128
 1718 0476 80        		.byte	-128
 1719 0477 00        		.byte	0
 1720 0478 00        		.byte	0
 1721 0479 6B        		.byte	107
 1722 047a 94        		.byte	-108
 1723 047b 94        		.byte	-108
 1724 047c 94        		.byte	-108
 1725 047d 93        		.byte	-109
 1726 047e 60        		.byte	96
 1727 047f 00        		.byte	0
 1728 0480 08        		.byte	8
 1729 0481 F8        		.byte	-8
 1730 0482 00        		.byte	0
 1731 0483 80        		.byte	-128
 1732 0484 80        		.byte	-128
 1733 0485 80        		.byte	-128
 1734 0486 00        		.byte	0
 1735 0487 00        		.byte	0
 1736 0488 20        		.byte	32
 1737 0489 3F        		.byte	63
 1738 048a 21        		.byte	33
 1739 048b 00        		.byte	0
 1740 048c 00        		.byte	0
 1741 048d 20        		.byte	32
 1742 048e 3F        		.byte	63
 1743 048f 20        		.byte	32
 1744 0490 00        		.byte	0
 1745 0491 80        		.byte	-128
 1746 0492 98        		.byte	-104
 1747 0493 98        		.byte	-104
 1748 0494 00        		.byte	0
 1749 0495 00        		.byte	0
 1750 0496 00        		.byte	0
 1751 0497 00        		.byte	0
 1752 0498 00        		.byte	0
 1753 0499 20        		.byte	32
 1754 049a 20        		.byte	32
 1755 049b 3F        		.byte	63
 1756 049c 20        		.byte	32
 1757 049d 20        		.byte	32
 1758 049e 00        		.byte	0
 1759 049f 00        		.byte	0
 1760 04a0 00        		.byte	0
 1761 04a1 00        		.byte	0
 1762 04a2 00        		.byte	0
 1763 04a3 80        		.byte	-128
 1764 04a4 98        		.byte	-104
 1765 04a5 98        		.byte	-104
 1766 04a6 00        		.byte	0
 1767 04a7 00        		.byte	0
 1768 04a8 00        		.byte	0
 1769 04a9 C0        		.byte	-64
 1770 04aa 80        		.byte	-128
 1771 04ab 80        		.byte	-128
 1772 04ac 80        		.byte	-128
 1773 04ad 7F        		.byte	127
 1774 04ae 00        		.byte	0
 1775 04af 00        		.byte	0
 1776 04b0 08        		.byte	8
 1777 04b1 F8        		.byte	-8
 1778 04b2 00        		.byte	0
 1779 04b3 00        		.byte	0
 1780 04b4 80        		.byte	-128
 1781 04b5 80        		.byte	-128
 1782 04b6 80        		.byte	-128
 1783 04b7 00        		.byte	0
 1784 04b8 20        		.byte	32
 1785 04b9 3F        		.byte	63
 1786 04ba 24        		.byte	36
 1787 04bb 02        		.byte	2
 1788 04bc 2D        		.byte	45
 1789 04bd 30        		.byte	48
 1790 04be 20        		.byte	32
 1791 04bf 00        		.byte	0
 1792 04c0 00        		.byte	0
 1793 04c1 08        		.byte	8
 1794 04c2 08        		.byte	8
 1795 04c3 F8        		.byte	-8
 1796 04c4 00        		.byte	0
 1797 04c5 00        		.byte	0
 1798 04c6 00        		.byte	0
 1799 04c7 00        		.byte	0
 1800 04c8 00        		.byte	0
 1801 04c9 20        		.byte	32
 1802 04ca 20        		.byte	32
 1803 04cb 3F        		.byte	63
 1804 04cc 20        		.byte	32
 1805 04cd 20        		.byte	32
 1806 04ce 00        		.byte	0
 1807 04cf 00        		.byte	0
 1808 04d0 80        		.byte	-128
 1809 04d1 80        		.byte	-128
 1810 04d2 80        		.byte	-128
 1811 04d3 80        		.byte	-128
 1812 04d4 80        		.byte	-128
 1813 04d5 80        		.byte	-128
 1814 04d6 80        		.byte	-128
 1815 04d7 00        		.byte	0
 1816 04d8 20        		.byte	32
 1817 04d9 3F        		.byte	63
 1818 04da 20        		.byte	32
 1819 04db 00        		.byte	0
 1820 04dc 3F        		.byte	63
 1821 04dd 20        		.byte	32
 1822 04de 00        		.byte	0
 1823 04df 3F        		.byte	63
 1824 04e0 80        		.byte	-128
 1825 04e1 80        		.byte	-128
 1826 04e2 00        		.byte	0
 1827 04e3 80        		.byte	-128
 1828 04e4 80        		.byte	-128
 1829 04e5 80        		.byte	-128
 1830 04e6 00        		.byte	0
 1831 04e7 00        		.byte	0
 1832 04e8 20        		.byte	32
 1833 04e9 3F        		.byte	63
 1834 04ea 21        		.byte	33
 1835 04eb 00        		.byte	0
 1836 04ec 00        		.byte	0
 1837 04ed 20        		.byte	32
 1838 04ee 3F        		.byte	63
 1839 04ef 20        		.byte	32
 1840 04f0 00        		.byte	0
 1841 04f1 00        		.byte	0
 1842 04f2 80        		.byte	-128
 1843 04f3 80        		.byte	-128
 1844 04f4 80        		.byte	-128
 1845 04f5 80        		.byte	-128
 1846 04f6 00        		.byte	0
 1847 04f7 00        		.byte	0
 1848 04f8 00        		.byte	0
 1849 04f9 1F        		.byte	31
 1850 04fa 20        		.byte	32
 1851 04fb 20        		.byte	32
 1852 04fc 20        		.byte	32
 1853 04fd 20        		.byte	32
 1854 04fe 1F        		.byte	31
 1855 04ff 00        		.byte	0
 1856 0500 80        		.byte	-128
 1857 0501 80        		.byte	-128
 1858 0502 00        		.byte	0
 1859 0503 80        		.byte	-128
 1860 0504 80        		.byte	-128
 1861 0505 00        		.byte	0
 1862 0506 00        		.byte	0
 1863 0507 00        		.byte	0
 1864 0508 80        		.byte	-128
 1865 0509 FF        		.byte	-1
 1866 050a A1        		.byte	-95
 1867 050b 20        		.byte	32
 1868 050c 20        		.byte	32
 1869 050d 11        		.byte	17
 1870 050e 0E        		.byte	14
 1871 050f 00        		.byte	0
 1872 0510 00        		.byte	0
 1873 0511 00        		.byte	0
 1874 0512 00        		.byte	0
 1875 0513 80        		.byte	-128
 1876 0514 80        		.byte	-128
 1877 0515 80        		.byte	-128
 1878 0516 80        		.byte	-128
 1879 0517 00        		.byte	0
 1880 0518 00        		.byte	0
 1881 0519 0E        		.byte	14
 1882 051a 11        		.byte	17
 1883 051b 20        		.byte	32
 1884 051c 20        		.byte	32
 1885 051d A0        		.byte	-96
 1886 051e FF        		.byte	-1
 1887 051f 80        		.byte	-128
 1888 0520 80        		.byte	-128
 1889 0521 80        		.byte	-128
 1890 0522 80        		.byte	-128
 1891 0523 00        		.byte	0
 1892 0524 80        		.byte	-128
 1893 0525 80        		.byte	-128
 1894 0526 80        		.byte	-128
 1895 0527 00        		.byte	0
 1896 0528 20        		.byte	32
 1897 0529 20        		.byte	32
 1898 052a 3F        		.byte	63
 1899 052b 21        		.byte	33
 1900 052c 20        		.byte	32
 1901 052d 00        		.byte	0
 1902 052e 01        		.byte	1
 1903 052f 00        		.byte	0
 1904 0530 00        		.byte	0
 1905 0531 00        		.byte	0
 1906 0532 80        		.byte	-128
 1907 0533 80        		.byte	-128
 1908 0534 80        		.byte	-128
 1909 0535 80        		.byte	-128
 1910 0536 80        		.byte	-128
 1911 0537 00        		.byte	0
 1912 0538 00        		.byte	0
 1913 0539 33        		.byte	51
 1914 053a 24        		.byte	36
 1915 053b 24        		.byte	36
 1916 053c 24        		.byte	36
 1917 053d 24        		.byte	36
 1918 053e 19        		.byte	25
 1919 053f 00        		.byte	0
 1920 0540 00        		.byte	0
 1921 0541 80        		.byte	-128
 1922 0542 80        		.byte	-128
 1923 0543 E0        		.byte	-32
 1924 0544 80        		.byte	-128
 1925 0545 80        		.byte	-128
 1926 0546 00        		.byte	0
 1927 0547 00        		.byte	0
 1928 0548 00        		.byte	0
 1929 0549 00        		.byte	0
 1930 054a 00        		.byte	0
 1931 054b 1F        		.byte	31
 1932 054c 20        		.byte	32
 1933 054d 20        		.byte	32
 1934 054e 00        		.byte	0
 1935 054f 00        		.byte	0
 1936 0550 80        		.byte	-128
 1937 0551 80        		.byte	-128
 1938 0552 00        		.byte	0
 1939 0553 00        		.byte	0
 1940 0554 00        		.byte	0
 1941 0555 80        		.byte	-128
 1942 0556 80        		.byte	-128
 1943 0557 00        		.byte	0
 1944 0558 00        		.byte	0
 1945 0559 1F        		.byte	31
 1946 055a 20        		.byte	32
 1947 055b 20        		.byte	32
 1948 055c 20        		.byte	32
 1949 055d 10        		.byte	16
 1950 055e 3F        		.byte	63
 1951 055f 20        		.byte	32
 1952 0560 80        		.byte	-128
 1953 0561 80        		.byte	-128
 1954 0562 80        		.byte	-128
 1955 0563 00        		.byte	0
 1956 0564 00        		.byte	0
 1957 0565 80        		.byte	-128
 1958 0566 80        		.byte	-128
 1959 0567 80        		.byte	-128
 1960 0568 00        		.byte	0
 1961 0569 01        		.byte	1
 1962 056a 0E        		.byte	14
 1963 056b 30        		.byte	48
 1964 056c 08        		.byte	8
 1965 056d 06        		.byte	6
 1966 056e 01        		.byte	1
 1967 056f 00        		.byte	0
 1968 0570 80        		.byte	-128
 1969 0571 80        		.byte	-128
 1970 0572 00        		.byte	0
 1971 0573 80        		.byte	-128
 1972 0574 00        		.byte	0
 1973 0575 80        		.byte	-128
 1974 0576 80        		.byte	-128
 1975 0577 80        		.byte	-128
 1976 0578 0F        		.byte	15
 1977 0579 30        		.byte	48
 1978 057a 0C        		.byte	12
 1979 057b 03        		.byte	3
 1980 057c 0C        		.byte	12
 1981 057d 30        		.byte	48
 1982 057e 0F        		.byte	15
 1983 057f 00        		.byte	0
 1984 0580 00        		.byte	0
 1985 0581 80        		.byte	-128
 1986 0582 80        		.byte	-128
 1987 0583 00        		.byte	0
 1988 0584 80        		.byte	-128
 1989 0585 80        		.byte	-128
 1990 0586 80        		.byte	-128
 1991 0587 00        		.byte	0
 1992 0588 00        		.byte	0
 1993 0589 20        		.byte	32
 1994 058a 31        		.byte	49
 1995 058b 2E        		.byte	46
 1996 058c 0E        		.byte	14
 1997 058d 31        		.byte	49
 1998 058e 20        		.byte	32
 1999 058f 00        		.byte	0
 2000 0590 80        		.byte	-128
 2001 0591 80        		.byte	-128
 2002 0592 80        		.byte	-128
 2003 0593 00        		.byte	0
 2004 0594 00        		.byte	0
 2005 0595 80        		.byte	-128
 2006 0596 80        		.byte	-128
 2007 0597 80        		.byte	-128
 2008 0598 80        		.byte	-128
 2009 0599 81        		.byte	-127
 2010 059a 8E        		.byte	-114
 2011 059b 70        		.byte	112
 2012 059c 18        		.byte	24
 2013 059d 06        		.byte	6
 2014 059e 01        		.byte	1
 2015 059f 00        		.byte	0
 2016 05a0 00        		.byte	0
 2017 05a1 80        		.byte	-128
 2018 05a2 80        		.byte	-128
 2019 05a3 80        		.byte	-128
 2020 05a4 80        		.byte	-128
 2021 05a5 80        		.byte	-128
 2022 05a6 80        		.byte	-128
 2023 05a7 00        		.byte	0
 2024 05a8 00        		.byte	0
 2025 05a9 21        		.byte	33
 2026 05aa 30        		.byte	48
 2027 05ab 2C        		.byte	44
 2028 05ac 22        		.byte	34
 2029 05ad 21        		.byte	33
 2030 05ae 30        		.byte	48
 2031 05af 00        		.byte	0
 2032 05b0 00        		.byte	0
 2033 05b1 00        		.byte	0
 2034 05b2 00        		.byte	0
 2035 05b3 00        		.byte	0
 2036 05b4 80        		.byte	-128
 2037 05b5 7C        		.byte	124
 2038 05b6 02        		.byte	2
 2039 05b7 02        		.byte	2
 2040 05b8 00        		.byte	0
 2041 05b9 00        		.byte	0
 2042 05ba 00        		.byte	0
 2043 05bb 00        		.byte	0
 2044 05bc 00        		.byte	0
 2045 05bd 3F        		.byte	63
 2046 05be 40        		.byte	64
 2047 05bf 40        		.byte	64
 2048 05c0 00        		.byte	0
 2049 05c1 00        		.byte	0
 2050 05c2 00        		.byte	0
 2051 05c3 00        		.byte	0
 2052 05c4 FF        		.byte	-1
 2053 05c5 00        		.byte	0
 2054 05c6 00        		.byte	0
 2055 05c7 00        		.byte	0
 2056 05c8 00        		.byte	0
 2057 05c9 00        		.byte	0
 2058 05ca 00        		.byte	0
 2059 05cb 00        		.byte	0
 2060 05cc FF        		.byte	-1
 2061 05cd 00        		.byte	0
 2062 05ce 00        		.byte	0
 2063 05cf 00        		.byte	0
 2064 05d0 00        		.byte	0
 2065 05d1 02        		.byte	2
 2066 05d2 02        		.byte	2
 2067 05d3 7C        		.byte	124
 2068 05d4 80        		.byte	-128
 2069 05d5 00        		.byte	0
 2070 05d6 00        		.byte	0
 2071 05d7 00        		.byte	0
 2072 05d8 00        		.byte	0
 2073 05d9 40        		.byte	64
 2074 05da 40        		.byte	64
 2075 05db 3F        		.byte	63
 2076 05dc 00        		.byte	0
 2077 05dd 00        		.byte	0
 2078 05de 00        		.byte	0
 2079 05df 00        		.byte	0
 2080 05e0 00        		.byte	0
 2081 05e1 06        		.byte	6
 2082 05e2 01        		.byte	1
 2083 05e3 01        		.byte	1
 2084 05e4 02        		.byte	2
 2085 05e5 02        		.byte	2
 2086 05e6 04        		.byte	4
 2087 05e7 04        		.byte	4
 2088 05e8 00        		.byte	0
 2089 05e9 00        		.byte	0
 2090 05ea 00        		.byte	0
 2091 05eb 00        		.byte	0
 2092 05ec 00        		.byte	0
 2093 05ed 00        		.byte	0
 2094 05ee 00        		.byte	0
 2095 05ef 00        		.byte	0
 2096               	.global	ssd1306xled_font6x8data
 2099               	ssd1306xled_font6x8data:
 2100 05f0 00        		.byte	0
 2101 05f1 00        		.byte	0
 2102 05f2 00        		.byte	0
 2103 05f3 00        		.byte	0
 2104 05f4 00        		.byte	0
 2105 05f5 00        		.byte	0
 2106 05f6 00        		.byte	0
 2107 05f7 00        		.byte	0
 2108 05f8 00        		.byte	0
 2109 05f9 2F        		.byte	47
 2110 05fa 00        		.byte	0
 2111 05fb 00        		.byte	0
 2112 05fc 00        		.byte	0
 2113 05fd 00        		.byte	0
 2114 05fe 07        		.byte	7
 2115 05ff 00        		.byte	0
 2116 0600 07        		.byte	7
 2117 0601 00        		.byte	0
 2118 0602 00        		.byte	0
 2119 0603 14        		.byte	20
 2120 0604 7F        		.byte	127
 2121 0605 14        		.byte	20
 2122 0606 7F        		.byte	127
 2123 0607 14        		.byte	20
 2124 0608 00        		.byte	0
 2125 0609 24        		.byte	36
 2126 060a 2A        		.byte	42
 2127 060b 7F        		.byte	127
 2128 060c 2A        		.byte	42
 2129 060d 12        		.byte	18
 2130 060e 00        		.byte	0
 2131 060f 62        		.byte	98
 2132 0610 64        		.byte	100
 2133 0611 08        		.byte	8
 2134 0612 13        		.byte	19
 2135 0613 23        		.byte	35
 2136 0614 00        		.byte	0
 2137 0615 36        		.byte	54
 2138 0616 49        		.byte	73
 2139 0617 55        		.byte	85
 2140 0618 22        		.byte	34
 2141 0619 50        		.byte	80
 2142 061a 00        		.byte	0
 2143 061b 00        		.byte	0
 2144 061c 05        		.byte	5
 2145 061d 03        		.byte	3
 2146 061e 00        		.byte	0
 2147 061f 00        		.byte	0
 2148 0620 00        		.byte	0
 2149 0621 00        		.byte	0
 2150 0622 1C        		.byte	28
 2151 0623 22        		.byte	34
 2152 0624 41        		.byte	65
 2153 0625 00        		.byte	0
 2154 0626 00        		.byte	0
 2155 0627 00        		.byte	0
 2156 0628 41        		.byte	65
 2157 0629 22        		.byte	34
 2158 062a 1C        		.byte	28
 2159 062b 00        		.byte	0
 2160 062c 00        		.byte	0
 2161 062d 14        		.byte	20
 2162 062e 08        		.byte	8
 2163 062f 3E        		.byte	62
 2164 0630 08        		.byte	8
 2165 0631 14        		.byte	20
 2166 0632 00        		.byte	0
 2167 0633 08        		.byte	8
 2168 0634 08        		.byte	8
 2169 0635 3E        		.byte	62
 2170 0636 08        		.byte	8
 2171 0637 08        		.byte	8
 2172 0638 00        		.byte	0
 2173 0639 00        		.byte	0
 2174 063a 00        		.byte	0
 2175 063b A0        		.byte	-96
 2176 063c 60        		.byte	96
 2177 063d 00        		.byte	0
 2178 063e 00        		.byte	0
 2179 063f 08        		.byte	8
 2180 0640 08        		.byte	8
 2181 0641 08        		.byte	8
 2182 0642 08        		.byte	8
 2183 0643 08        		.byte	8
 2184 0644 00        		.byte	0
 2185 0645 00        		.byte	0
 2186 0646 60        		.byte	96
 2187 0647 60        		.byte	96
 2188 0648 00        		.byte	0
 2189 0649 00        		.byte	0
 2190 064a 00        		.byte	0
 2191 064b 20        		.byte	32
 2192 064c 10        		.byte	16
 2193 064d 08        		.byte	8
 2194 064e 04        		.byte	4
 2195 064f 02        		.byte	2
 2196 0650 00        		.byte	0
 2197 0651 3E        		.byte	62
 2198 0652 51        		.byte	81
 2199 0653 49        		.byte	73
 2200 0654 45        		.byte	69
 2201 0655 3E        		.byte	62
 2202 0656 00        		.byte	0
 2203 0657 00        		.byte	0
 2204 0658 42        		.byte	66
 2205 0659 7F        		.byte	127
 2206 065a 40        		.byte	64
 2207 065b 00        		.byte	0
 2208 065c 00        		.byte	0
 2209 065d 42        		.byte	66
 2210 065e 61        		.byte	97
 2211 065f 51        		.byte	81
 2212 0660 49        		.byte	73
 2213 0661 46        		.byte	70
 2214 0662 00        		.byte	0
 2215 0663 21        		.byte	33
 2216 0664 41        		.byte	65
 2217 0665 45        		.byte	69
 2218 0666 4B        		.byte	75
 2219 0667 31        		.byte	49
 2220 0668 00        		.byte	0
 2221 0669 18        		.byte	24
 2222 066a 14        		.byte	20
 2223 066b 12        		.byte	18
 2224 066c 7F        		.byte	127
 2225 066d 10        		.byte	16
 2226 066e 00        		.byte	0
 2227 066f 27        		.byte	39
 2228 0670 45        		.byte	69
 2229 0671 45        		.byte	69
 2230 0672 45        		.byte	69
 2231 0673 39        		.byte	57
 2232 0674 00        		.byte	0
 2233 0675 3C        		.byte	60
 2234 0676 4A        		.byte	74
 2235 0677 49        		.byte	73
 2236 0678 49        		.byte	73
 2237 0679 30        		.byte	48
 2238 067a 00        		.byte	0
 2239 067b 01        		.byte	1
 2240 067c 71        		.byte	113
 2241 067d 09        		.byte	9
 2242 067e 05        		.byte	5
 2243 067f 03        		.byte	3
 2244 0680 00        		.byte	0
 2245 0681 36        		.byte	54
 2246 0682 49        		.byte	73
 2247 0683 49        		.byte	73
 2248 0684 49        		.byte	73
 2249 0685 36        		.byte	54
 2250 0686 00        		.byte	0
 2251 0687 06        		.byte	6
 2252 0688 49        		.byte	73
 2253 0689 49        		.byte	73
 2254 068a 29        		.byte	41
 2255 068b 1E        		.byte	30
 2256 068c 00        		.byte	0
 2257 068d 00        		.byte	0
 2258 068e 36        		.byte	54
 2259 068f 36        		.byte	54
 2260 0690 00        		.byte	0
 2261 0691 00        		.byte	0
 2262 0692 00        		.byte	0
 2263 0693 00        		.byte	0
 2264 0694 56        		.byte	86
 2265 0695 36        		.byte	54
 2266 0696 00        		.byte	0
 2267 0697 00        		.byte	0
 2268 0698 00        		.byte	0
 2269 0699 08        		.byte	8
 2270 069a 14        		.byte	20
 2271 069b 22        		.byte	34
 2272 069c 41        		.byte	65
 2273 069d 00        		.byte	0
 2274 069e 00        		.byte	0
 2275 069f 14        		.byte	20
 2276 06a0 14        		.byte	20
 2277 06a1 14        		.byte	20
 2278 06a2 14        		.byte	20
 2279 06a3 14        		.byte	20
 2280 06a4 00        		.byte	0
 2281 06a5 00        		.byte	0
 2282 06a6 41        		.byte	65
 2283 06a7 22        		.byte	34
 2284 06a8 14        		.byte	20
 2285 06a9 08        		.byte	8
 2286 06aa 00        		.byte	0
 2287 06ab 02        		.byte	2
 2288 06ac 01        		.byte	1
 2289 06ad 51        		.byte	81
 2290 06ae 09        		.byte	9
 2291 06af 06        		.byte	6
 2292 06b0 00        		.byte	0
 2293 06b1 32        		.byte	50
 2294 06b2 49        		.byte	73
 2295 06b3 59        		.byte	89
 2296 06b4 51        		.byte	81
 2297 06b5 3E        		.byte	62
 2298 06b6 00        		.byte	0
 2299 06b7 7C        		.byte	124
 2300 06b8 12        		.byte	18
 2301 06b9 11        		.byte	17
 2302 06ba 12        		.byte	18
 2303 06bb 7C        		.byte	124
 2304 06bc 00        		.byte	0
 2305 06bd 7F        		.byte	127
 2306 06be 49        		.byte	73
 2307 06bf 49        		.byte	73
 2308 06c0 49        		.byte	73
 2309 06c1 36        		.byte	54
 2310 06c2 00        		.byte	0
 2311 06c3 3E        		.byte	62
 2312 06c4 41        		.byte	65
 2313 06c5 41        		.byte	65
 2314 06c6 41        		.byte	65
 2315 06c7 22        		.byte	34
 2316 06c8 00        		.byte	0
 2317 06c9 7F        		.byte	127
 2318 06ca 41        		.byte	65
 2319 06cb 41        		.byte	65
 2320 06cc 22        		.byte	34
 2321 06cd 1C        		.byte	28
 2322 06ce 00        		.byte	0
 2323 06cf 7F        		.byte	127
 2324 06d0 49        		.byte	73
 2325 06d1 49        		.byte	73
 2326 06d2 49        		.byte	73
 2327 06d3 41        		.byte	65
 2328 06d4 00        		.byte	0
 2329 06d5 7F        		.byte	127
 2330 06d6 09        		.byte	9
 2331 06d7 09        		.byte	9
 2332 06d8 09        		.byte	9
 2333 06d9 01        		.byte	1
 2334 06da 00        		.byte	0
 2335 06db 3E        		.byte	62
 2336 06dc 41        		.byte	65
 2337 06dd 49        		.byte	73
 2338 06de 49        		.byte	73
 2339 06df 7A        		.byte	122
 2340 06e0 00        		.byte	0
 2341 06e1 7F        		.byte	127
 2342 06e2 08        		.byte	8
 2343 06e3 08        		.byte	8
 2344 06e4 08        		.byte	8
 2345 06e5 7F        		.byte	127
 2346 06e6 00        		.byte	0
 2347 06e7 00        		.byte	0
 2348 06e8 41        		.byte	65
 2349 06e9 7F        		.byte	127
 2350 06ea 41        		.byte	65
 2351 06eb 00        		.byte	0
 2352 06ec 00        		.byte	0
 2353 06ed 20        		.byte	32
 2354 06ee 40        		.byte	64
 2355 06ef 41        		.byte	65
 2356 06f0 3F        		.byte	63
 2357 06f1 01        		.byte	1
 2358 06f2 00        		.byte	0
 2359 06f3 7F        		.byte	127
 2360 06f4 08        		.byte	8
 2361 06f5 14        		.byte	20
 2362 06f6 22        		.byte	34
 2363 06f7 41        		.byte	65
 2364 06f8 00        		.byte	0
 2365 06f9 7F        		.byte	127
 2366 06fa 40        		.byte	64
 2367 06fb 40        		.byte	64
 2368 06fc 40        		.byte	64
 2369 06fd 40        		.byte	64
 2370 06fe 00        		.byte	0
 2371 06ff 7F        		.byte	127
 2372 0700 02        		.byte	2
 2373 0701 0C        		.byte	12
 2374 0702 02        		.byte	2
 2375 0703 7F        		.byte	127
 2376 0704 00        		.byte	0
 2377 0705 7F        		.byte	127
 2378 0706 04        		.byte	4
 2379 0707 08        		.byte	8
 2380 0708 10        		.byte	16
 2381 0709 7F        		.byte	127
 2382 070a 00        		.byte	0
 2383 070b 3E        		.byte	62
 2384 070c 41        		.byte	65
 2385 070d 41        		.byte	65
 2386 070e 41        		.byte	65
 2387 070f 3E        		.byte	62
 2388 0710 00        		.byte	0
 2389 0711 7F        		.byte	127
 2390 0712 09        		.byte	9
 2391 0713 09        		.byte	9
 2392 0714 09        		.byte	9
 2393 0715 06        		.byte	6
 2394 0716 00        		.byte	0
 2395 0717 3E        		.byte	62
 2396 0718 41        		.byte	65
 2397 0719 51        		.byte	81
 2398 071a 21        		.byte	33
 2399 071b 5E        		.byte	94
 2400 071c 00        		.byte	0
 2401 071d 7F        		.byte	127
 2402 071e 09        		.byte	9
 2403 071f 19        		.byte	25
 2404 0720 29        		.byte	41
 2405 0721 46        		.byte	70
 2406 0722 00        		.byte	0
 2407 0723 46        		.byte	70
 2408 0724 49        		.byte	73
 2409 0725 49        		.byte	73
 2410 0726 49        		.byte	73
 2411 0727 31        		.byte	49
 2412 0728 00        		.byte	0
 2413 0729 01        		.byte	1
 2414 072a 01        		.byte	1
 2415 072b 7F        		.byte	127
 2416 072c 01        		.byte	1
 2417 072d 01        		.byte	1
 2418 072e 00        		.byte	0
 2419 072f 3F        		.byte	63
 2420 0730 40        		.byte	64
 2421 0731 40        		.byte	64
 2422 0732 40        		.byte	64
 2423 0733 3F        		.byte	63
 2424 0734 00        		.byte	0
 2425 0735 1F        		.byte	31
 2426 0736 20        		.byte	32
 2427 0737 40        		.byte	64
 2428 0738 20        		.byte	32
 2429 0739 1F        		.byte	31
 2430 073a 00        		.byte	0
 2431 073b 3F        		.byte	63
 2432 073c 40        		.byte	64
 2433 073d 38        		.byte	56
 2434 073e 40        		.byte	64
 2435 073f 3F        		.byte	63
 2436 0740 00        		.byte	0
 2437 0741 63        		.byte	99
 2438 0742 14        		.byte	20
 2439 0743 08        		.byte	8
 2440 0744 14        		.byte	20
 2441 0745 63        		.byte	99
 2442 0746 00        		.byte	0
 2443 0747 07        		.byte	7
 2444 0748 08        		.byte	8
 2445 0749 70        		.byte	112
 2446 074a 08        		.byte	8
 2447 074b 07        		.byte	7
 2448 074c 00        		.byte	0
 2449 074d 61        		.byte	97
 2450 074e 51        		.byte	81
 2451 074f 49        		.byte	73
 2452 0750 45        		.byte	69
 2453 0751 43        		.byte	67
 2454 0752 00        		.byte	0
 2455 0753 00        		.byte	0
 2456 0754 7F        		.byte	127
 2457 0755 41        		.byte	65
 2458 0756 41        		.byte	65
 2459 0757 00        		.byte	0
 2460 0758 00        		.byte	0
 2461 0759 55        		.byte	85
 2462 075a 2A        		.byte	42
 2463 075b 55        		.byte	85
 2464 075c 2A        		.byte	42
 2465 075d 55        		.byte	85
 2466 075e 00        		.byte	0
 2467 075f 00        		.byte	0
 2468 0760 41        		.byte	65
 2469 0761 41        		.byte	65
 2470 0762 7F        		.byte	127
 2471 0763 00        		.byte	0
 2472 0764 00        		.byte	0
 2473 0765 04        		.byte	4
 2474 0766 02        		.byte	2
 2475 0767 01        		.byte	1
 2476 0768 02        		.byte	2
 2477 0769 04        		.byte	4
 2478 076a 00        		.byte	0
 2479 076b 40        		.byte	64
 2480 076c 40        		.byte	64
 2481 076d 40        		.byte	64
 2482 076e 40        		.byte	64
 2483 076f 40        		.byte	64
 2484 0770 00        		.byte	0
 2485 0771 00        		.byte	0
 2486 0772 01        		.byte	1
 2487 0773 02        		.byte	2
 2488 0774 04        		.byte	4
 2489 0775 00        		.byte	0
 2490 0776 00        		.byte	0
 2491 0777 20        		.byte	32
 2492 0778 54        		.byte	84
 2493 0779 54        		.byte	84
 2494 077a 54        		.byte	84
 2495 077b 78        		.byte	120
 2496 077c 00        		.byte	0
 2497 077d 7F        		.byte	127
 2498 077e 48        		.byte	72
 2499 077f 44        		.byte	68
 2500 0780 44        		.byte	68
 2501 0781 38        		.byte	56
 2502 0782 00        		.byte	0
 2503 0783 38        		.byte	56
 2504 0784 44        		.byte	68
 2505 0785 44        		.byte	68
 2506 0786 44        		.byte	68
 2507 0787 20        		.byte	32
 2508 0788 00        		.byte	0
 2509 0789 38        		.byte	56
 2510 078a 44        		.byte	68
 2511 078b 44        		.byte	68
 2512 078c 48        		.byte	72
 2513 078d 7F        		.byte	127
 2514 078e 00        		.byte	0
 2515 078f 38        		.byte	56
 2516 0790 54        		.byte	84
 2517 0791 54        		.byte	84
 2518 0792 54        		.byte	84
 2519 0793 18        		.byte	24
 2520 0794 00        		.byte	0
 2521 0795 08        		.byte	8
 2522 0796 7E        		.byte	126
 2523 0797 09        		.byte	9
 2524 0798 01        		.byte	1
 2525 0799 02        		.byte	2
 2526 079a 00        		.byte	0
 2527 079b 18        		.byte	24
 2528 079c A4        		.byte	-92
 2529 079d A4        		.byte	-92
 2530 079e A4        		.byte	-92
 2531 079f 7C        		.byte	124
 2532 07a0 00        		.byte	0
 2533 07a1 7F        		.byte	127
 2534 07a2 08        		.byte	8
 2535 07a3 04        		.byte	4
 2536 07a4 04        		.byte	4
 2537 07a5 78        		.byte	120
 2538 07a6 00        		.byte	0
 2539 07a7 00        		.byte	0
 2540 07a8 44        		.byte	68
 2541 07a9 7D        		.byte	125
 2542 07aa 40        		.byte	64
 2543 07ab 00        		.byte	0
 2544 07ac 00        		.byte	0
 2545 07ad 40        		.byte	64
 2546 07ae 80        		.byte	-128
 2547 07af 84        		.byte	-124
 2548 07b0 7D        		.byte	125
 2549 07b1 00        		.byte	0
 2550 07b2 00        		.byte	0
 2551 07b3 7F        		.byte	127
 2552 07b4 10        		.byte	16
 2553 07b5 28        		.byte	40
 2554 07b6 44        		.byte	68
 2555 07b7 00        		.byte	0
 2556 07b8 00        		.byte	0
 2557 07b9 00        		.byte	0
 2558 07ba 41        		.byte	65
 2559 07bb 7F        		.byte	127
 2560 07bc 40        		.byte	64
 2561 07bd 00        		.byte	0
 2562 07be 00        		.byte	0
 2563 07bf 7C        		.byte	124
 2564 07c0 04        		.byte	4
 2565 07c1 18        		.byte	24
 2566 07c2 04        		.byte	4
 2567 07c3 78        		.byte	120
 2568 07c4 00        		.byte	0
 2569 07c5 7C        		.byte	124
 2570 07c6 08        		.byte	8
 2571 07c7 04        		.byte	4
 2572 07c8 04        		.byte	4
 2573 07c9 78        		.byte	120
 2574 07ca 00        		.byte	0
 2575 07cb 38        		.byte	56
 2576 07cc 44        		.byte	68
 2577 07cd 44        		.byte	68
 2578 07ce 44        		.byte	68
 2579 07cf 38        		.byte	56
 2580 07d0 00        		.byte	0
 2581 07d1 FC        		.byte	-4
 2582 07d2 24        		.byte	36
 2583 07d3 24        		.byte	36
 2584 07d4 24        		.byte	36
 2585 07d5 18        		.byte	24
 2586 07d6 00        		.byte	0
 2587 07d7 18        		.byte	24
 2588 07d8 24        		.byte	36
 2589 07d9 24        		.byte	36
 2590 07da 18        		.byte	24
 2591 07db FC        		.byte	-4
 2592 07dc 00        		.byte	0
 2593 07dd 7C        		.byte	124
 2594 07de 08        		.byte	8
 2595 07df 04        		.byte	4
 2596 07e0 04        		.byte	4
 2597 07e1 08        		.byte	8
 2598 07e2 00        		.byte	0
 2599 07e3 48        		.byte	72
 2600 07e4 54        		.byte	84
 2601 07e5 54        		.byte	84
 2602 07e6 54        		.byte	84
 2603 07e7 20        		.byte	32
 2604 07e8 00        		.byte	0
 2605 07e9 04        		.byte	4
 2606 07ea 3F        		.byte	63
 2607 07eb 44        		.byte	68
 2608 07ec 40        		.byte	64
 2609 07ed 20        		.byte	32
 2610 07ee 00        		.byte	0
 2611 07ef 3C        		.byte	60
 2612 07f0 40        		.byte	64
 2613 07f1 40        		.byte	64
 2614 07f2 20        		.byte	32
 2615 07f3 7C        		.byte	124
 2616 07f4 00        		.byte	0
 2617 07f5 1C        		.byte	28
 2618 07f6 20        		.byte	32
 2619 07f7 40        		.byte	64
 2620 07f8 20        		.byte	32
 2621 07f9 1C        		.byte	28
 2622 07fa 00        		.byte	0
 2623 07fb 3C        		.byte	60
 2624 07fc 40        		.byte	64
 2625 07fd 30        		.byte	48
 2626 07fe 40        		.byte	64
 2627 07ff 3C        		.byte	60
 2628 0800 00        		.byte	0
 2629 0801 44        		.byte	68
 2630 0802 28        		.byte	40
 2631 0803 10        		.byte	16
 2632 0804 28        		.byte	40
 2633 0805 44        		.byte	68
 2634 0806 00        		.byte	0
 2635 0807 1C        		.byte	28
 2636 0808 A0        		.byte	-96
 2637 0809 A0        		.byte	-96
 2638 080a A0        		.byte	-96
 2639 080b 7C        		.byte	124
 2640 080c 00        		.byte	0
 2641 080d 44        		.byte	68
 2642 080e 64        		.byte	100
 2643 080f 54        		.byte	84
 2644 0810 4C        		.byte	76
 2645 0811 44        		.byte	68
 2646 0812 14        		.byte	20
 2647 0813 14        		.byte	20
 2648 0814 14        		.byte	20
 2649 0815 14        		.byte	20
 2650 0816 14        		.byte	20
 2651 0817 14        		.byte	20
 2652               		.text
 2653               	.Letext0:
 2654               		.file 3 "/usr/local/Cellar/avr-gcc/8.2.0/avr/include/stdint.h"
 2655               		.file 4 "ssd1306xledtx.h"
 2656               		.file 5 "font6x8.h"
 2657               		.file 6 "font8x16.h"
 2658               		.file 7 "ssd1306xled.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
              main.s:2      *ABS*:000000000000003e __SP_H__
              main.s:3      *ABS*:000000000000003d __SP_L__
              main.s:4      *ABS*:000000000000003f __SREG__
              main.s:5      *ABS*:0000000000000000 __tmp_reg__
              main.s:6      *ABS*:0000000000000001 __zero_reg__
              main.s:12     .text:0000000000000000 hardware_init
              main.s:2099   .progmem.data:00000000000005f0 ssd1306xled_font6x8data
              main.s:67     .text:000000000000002a timer1_init
              main.s:101    .text:0000000000000040 read_ADC
              main.s:170    .text:000000000000005a read_VCC
              main.s:251    .text:000000000000008c __vector_10
                            *ABS*:0000000000000003 __gcc_isr.n_pushed.001
              main.s:569    .bss:0000000000000002 i
              main.s:564    .bss:0000000000000000 doIt
              main.s:311    .text.startup:0000000000000000 main
              main.s:575    .progmem.data:0000000000000000 ssd1306xled_font8x16data

UNDEFINED SYMBOLS
ssd1306_init
ssd1306tx_init
ssd1306_fill4
__floatunsisf
__divsf3
__fixsfsi
__floatsisf
__addsf3
__mulsf3
__subsf3
ssd1306tx_stringxy
__divmodhi4
itoa
dtostrf
__do_copy_data
__do_clear_bss
